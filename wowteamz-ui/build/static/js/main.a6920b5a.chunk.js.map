{"version":3,"sources":["API_Interface/API_Interface.js","Login.js","Components/Accounts/Accounts.js","Components/Characters/RoleSelectionComponent.js","Components/Characters/Characters.js","Components/RaidTeams/MakeRaidTeam.js","Components/RaidTeams/CharsForRaidTeam.js","Components/RaidTeams/AddCharToTeam.js","Components/RaidTeams/OneRaidTeam.js","Components/RaidTeams/RaidTeams.js","Components/SummaryPage/Summary.js","Components/Guilds/MakeGuild.js","Components/Guilds/RaidsForGuild.js","Components/Guilds/Guilds.js","menu/MenuPresentationComponents.js","menu/MainDrawer.js","App.js","Signup.js","Main.js","reportWebVitals.js","index.js"],"names":["axiosAgent","axios","defaults","headers","common","baseURL","withCredentials","APIInterface","getUserInfo","email","password","console","log","JSON","stringify","post","checkUserEmail","get","concat","insertNewUser","userName","insertCharacter","raidTeam_id","then","response","data","catch","error","character","undefined","allCharacters","deleteCharacter","characterName","delete","encodeURIComponent","insertNotes","notes","insertRole","role","allAccounts","accountWithEmail","checkForGuild","guild_name","getGuild","createGuild","faction","gm_name","realm","addAccntToGuild","guild_id","account_id","raidsForGuild","removeAccnt","patch","deleteGuild","allRaidTeams","checkRaidName","teamName","createRaidTeam","numPlayers","raidDay_A","raidDay_B","raidTime","addPlayerToRaid","character_id","charsForRaidTeam","removeChar","deleteRaid","darkTheme","createTheme","palette","mode","Login","_ref","setUser","setSignupMode","setEmail","useState","setPassword","authFailed","setAuthFailed","verifyUser","setVerifyUser","useEffect","api","API","async","userInfo","user","status","_jsxs","ThemeProvider","theme","children","_jsx","CssBaseline","Grid","container","component","sx","height","item","xs","sm","md","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","Paper","elevation","square","Box","my","mx","display","flexDirection","alignItems","src","alt","style","width","noValidate","mt","TextField","label","fullWidth","value","onChange","e","target","margin","helperText","type","p","FormControlLabel","control","Checkbox","color","Button","variant","mb","onClick","handleLogin","length","marginLeft","handleSignup","accountsTableAttributes","title","attributeDBName","align","NameInputComponent","userInput","setUserInput","accounts","setAccounts","accountsJSONString","getAccounts","TRow","accountObject","TableRow","border","map","attr","idx","TableCell","Fragment","Typography","TableContainer","Table","minWidth","TableHead","TableBody","account","roleImages","Tank","Healer","DPS","RoleSelectionComponent","handleUpdateRole","selectedRole","setSelectedRole","Select","newRole","event","name","displayEmpty","renderValue","MenuItem","disabled","Object","entries","_ref2","image","characterTableAttributes","raidBuffRequirements","Paladin","Druid","DemonHunter","Monk","Priest","Mage","Evoker","Hunter","Warrior","Rogue","Warlock","classColorMap","DeathKnight","Shaman","raidID","isEditing","setIsEditing","setName","characters","setCharacters","editIdx","setEditIdx","editedText","setEditedText","expandedId","setExpandedId","characterCount","setCharacterCount","missingBuffs","setMissingBuffs","isMinimalView","setIsMinimalView","standardizeClassName","className","replace","warn","sortedCharacters","sort","a","b","roleOrder","fetchCharacters","intervalId","setInterval","clearInterval","every","char","class","buffs","classCounts","keys","forEach","requiredClass","hasOwnProperty","requiredCount","countShort","push","calculateMissingBuffs","cancelEdit","position","buff","index","prev","top","right","borderColor","filter","includes","React","backgroundColor","IconButton","ExpandLessIcon","ExpandMoreIcon","detail","handleEdit","MoreVertIcon","encodedName","Error","handleDelete","size","updatedCharacter","i","saveEdit","colSpan","whiteSpace","onKeyPress","key","characterData","handleAddName","fontSize","AddIcon","defaultTheme","SignUp","setMakeRaidMode","setTeamName","setNumPlayers","setRaidDayA","setRaidDayB","setRaidTime","exist","setExist","raidCheck","setRaidCheck","newUserInfo","alert","Container","maxWidth","marginTop","spacing","required","id","n","FormControl","m","InputLabel","FormHelperText","t","handleSubmit","justifyContent","Link","handleGoBack","raidteamsTableAttributes","CharacterTable","setAddCharMode","setOneRaidMode","setRaid","setChars","raidteams","setRaidTeams","openRows","setOpenRows","buttonClicked","setButtonClicked","setRaidTeam_id","deleteMode","setDeleteMode","removeMode","setRemoveMode","setCharacter_id","raidTeamName","setRaidTeamName","highlightMode","setHighlightMode","hoveredIdx","setHoveredIdx","hoveredCIdx","setCHoveredIdx","reloadTable","setReloadTable","raidteamsJSONString","getRaidTeams","charactersJSONString","Array","fill","handleMouseLeave","handleCMouseLeave","ml","team","onMouseEnter","onMouseLeave","newOpenRows","handleRowToggle","handleButtonClick","KeyboardArrowUpIcon","KeyboardArrowDownIcon","handleRaidClick","raid","raidteam","stopPropagation","isArray","handleRemove","OneRaidTeam","chars","addCharMode","viewCharacters","setViewCharacters","roleCount","Divider","BarChart","series","gearScore","xAxis","scaleType","tickLabelAngle","tickLabelProps","textAnchor","dy","bottom","left","PieChart","Character","RaidTeams","makeRaidMode","oneRaidMode","MakeRaidTeam","AddCharToTeam","CharsForRaidTeam","Summary","props","setMakeGuildMode","setGuildName","setFaction","setGuildMaster","setRealm","guildCheck","setGuildCheck","r","guildTableAttributes","GuildTable","guilds","setGuild","raids","setRaids","guildName","setGuild_id","guildJSONString","getGuilds","guildObject","guild","Guilds","makeGuildMode","MakeGuild","RaidsForGuild","presentationComponents","Guild","Accounts","Characters","Main","styled","flexGrow","padding","AppBar","MuiAppBar","shouldForwardProp","prop","transition","transitions","create","easing","sharp","duration","leavingScreen","DrawerHeader","_ref3","mixins","toolbar","TopBar","_ref4","open","selectedItem","handleSelectedItem","logoutAction","Toolbar","List","PresentationListItems","menuItemTitles","comp","flex","noWrap","ListItem","button","ListItemText","primary","findSelectedComponent","MainDraswer","_ref5","useTheme","setOpen","setSelectedItem","main","typography","makeUserName","makeAccount","App","MainDrawer","setUserName","userCheck","setUserCheck","Avatar","bgcolor","LockOutlinedIcon","u","autoComplete","handleSignin","signupMode","logout","Signup","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6920b5a.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst AxiosConfigured = () => {\n    // Indicate to the API that all requests for this app are AJAX\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n    // Set the baseURL for all requests to the API domain instead of the current domain\n    // axios.defaults.baseURL = `http://localhost:8443/api/v1`;\n    axios.defaults.baseURL = `http://localhost:8443/api/v1`;\n\n\n    // Allow the browser to send cookies to the API domain (which include auth_token)\n    axios.defaults.withCredentials = true;\n\n\n//    axios.defaults.headers.common['X-CSRF-TOKEN'] = csrf_token;\n\n    return axios;\n};\n\n\nconst axiosAgent = AxiosConfigured();\n\nexport default class APIInterface {\n\n    //Login\n\n    async getUserInfo(email, password) {\n        console.log(JSON.stringify(email));\n        console.log(JSON.stringify(password));\n        return axiosAgent.post(`/login/`, {email, password});\n    }\n\n    //Signup\n\n    async checkUserEmail(email) {\n        return axiosAgent.get(`/signup/${email}`);\n    }\n\n    async insertNewUser(userName, email, password) {\n        console.log(JSON.stringify(email));\n        console.log(JSON.stringify(password));\n        return axiosAgent.post(`/signup/`, {email, password, userName});\n    }\n\n    //Characters\n\n    async insertCharacter(userName, raidTeam_id) {\n        return axiosAgent.post(`/characters/insert/`, { userName, raidTeam_id })\n            .then(response => response.data)\n            .catch(error => ({\n                error,\n                character: undefined\n            }));\n    }\n    async allCharacters(raidTeam_id) {\n        return axiosAgent.get(`characters/all-characters/${raidTeam_id}`);\n\n    }\n\n    async deleteCharacter(characterName) {\n        return axios.delete(`/characters/delete/${encodeURIComponent(characterName)}`);\n    }\n    \n    async insertNotes(characterName, notes) {\n        return axios.post(`/characters/insert-notes/${encodeURIComponent(characterName)}`, { notes });\n    }\n    async insertRole(characterName, raidTeam_id, role) {\n        return axios.post(`/characters/insert-role/${encodeURIComponent(characterName)}/${raidTeam_id}`, { role })  // Ensure correct URL and data\n            .then(response => response.data)\n            .catch(error => ({\n                error,\n            }));\n    }\n\n    //Accounts\n\n    async allAccounts() {\n        return axiosAgent.get(`accounts/all-accounts`);\n    }\n\n    async accountWithEmail(email) {\n        return axiosAgent.get(`accounts/${email}`);\n    }\n\n    //Guild\n\n    async checkForGuild(guild_name) {\n        return axiosAgent.get(`/guild/${guild_name}`);\n    }\n\n    async getGuild() {\n        return axiosAgent.get(`guild/all-guilds`);\n    }\n\n    async createGuild(guild_name, faction, gm_name, realm) {\n        return axiosAgent.post(`/guild/`, {guild_name, faction, gm_name, realm});\n    }\n\n    async addAccntToGuild(guild_id, account_id) {\n        return axiosAgent.get(`guild/${guild_id}/${account_id}`);\n    }\n\n    async raidsForGuild(guild_id) {\n        return axiosAgent.get(`/guild/${guild_id}/raids-for-guild`);\n    }\n\n    async removeAccnt(account_id) {\n        return axios.patch(`/guild/remove/${account_id}`);\n    }\n\n    async deleteGuild(guild_id) {\n        return axios.delete(`/guild/delete/${guild_id}`);\n    }\n\n\n    //Raid Teams\n\n    async allRaidTeams() {\n        return axiosAgent.get(`raidteams/all-raidteams`);\n    }\n\n    async checkRaidName(teamName) {\n        return axiosAgent.get(`/raidteams/${teamName}`);\n    }\n\n    async createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime) {\n        return axiosAgent.post(`/raidteams/`, {teamName, numPlayers, raidDay_A, raidDay_B, raidTime});\n    }\n\n    async addPlayerToRaid(raidTeam_id, character_id) {\n        return axiosAgent.get(`raidteams/${raidTeam_id}/${character_id}`);\n    }\n\n    async charsForRaidTeam(raidTeam_id) {\n        return axiosAgent.get(`/raidteams/${raidTeam_id}/chars-for-raidteam`);\n    }\n\n    async removeChar(character_id) {\n        return axios.patch(`/raidteams/remove/${character_id}`);\n    }\n\n    async deleteRaid(raidTeam_id) {\n        return axios.delete(`/raidteams/delete/${raidTeam_id}`);\n    }\n\n}","import React, { useState, useEffect } from \"react\";\nimport API from \"./API_Interface/API_Interface\";\nimport {\n  Avatar, Box, Button, Checkbox, CssBaseline, Divider, FormControlLabel,\n  Grid, Link, Paper, TextField, Typography} from \"@mui/material\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\n\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nexport default function Login({ setUser, setSignupMode}) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [authFailed, setAuthFailed] = useState(false);\n  const [verifyUser, setVerifyUser] = useState(false);\n  //const [newUser, setNewUser] = useState(false);\n \n  const handleLogin = () => {\n    console.log(\"handleLogin called.\");\n    if (email.length === 0 || password.length === 0) {\n      setAuthFailed(true);\n    } else {\n      setAuthFailed(false);\n      setVerifyUser(true);  // Move user verification flag here\n    }\n  };\n\n  const handleSignup = () => {\n    console.log(\"handleSignup called.\");\n    setSignupMode(true); // Toggle signup mode to true\n  };\n\n\n  useEffect(() => {\n    if (!verifyUser) return;\n\n    const api = new API();\n    async function getUserInfo() {\n        api.getUserInfo(email, password)\n        .then( userInfo => {\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo)}`);\n        const user = userInfo.data.user;\n        console.log(\"BELOW IS USER\");\n        console.log(user);\n        if (userInfo.data.status === \"OK\") {\n          console.log(\"SETTING USER to USER\");\n          setUser(user);\n        } else {\n          setVerifyUser(false);\n          setAuthFailed(true);\n        }\n      });\n    }\n    getUserInfo();\n  }, [verifyUser, email, password, setUser]); // Ensure dependencies are correctly listed\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <Grid container component=\"main\" sx={{ height: \"100vh\" }}>\n        <CssBaseline />\n        <Grid item xs={false} sm={4} md={7} sx={{\n          backgroundImage: \"url(https://i.imgur.com/4SbfxIK.jpeg)\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n        }} />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box sx={{ \n            my: 8, mx: 4, display: \"flex\", flexDirection: \"column\", alignItems: \"center\"\n          }}>\n            <Box> \n            <img src=\"http://www.royconboy.com/images/WT-logo.PNG\" alt=\"WT Logo\" style={{ width: '100%', height: 'auto' }} />\n            </Box>\n            \n            <Box component=\"form\" noValidate sx={{ mt: 1}}>\n              <TextField\n                error={authFailed}\n                label=\"Email\"\n                fullWidth\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                margin=\"normal\"\n                helperText={authFailed ? \"Invalid email or password\" : \"\"}\n              />\n              <TextField\n                error={authFailed}\n                label=\"Password\"\n                type=\"password\"\n                fullWidth\n                value={password}\n                onChange={(p) => setPassword(p.target.value)}\n                margin=\"normal\"\n                helperText={authFailed ? \"Invalid email or password\" : \"\"}\n              />\n              <FormControlLabel\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                label=\"Remember me\"\n              />\n              <Button\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n                onClick={handleLogin}\n              >\n                Sign In\n              </Button>\n              \n                \n                <Button\n                  variant=\"contained\"\n                  sx={{ mt: 3, mb: 2, marginLeft: 1 }} // Added marginLeft to create space between the Typography and Button\n                  onClick={handleSignup}\n                >\n                  Sign up here\n                </Button>\n              \n\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n}\n","import React, {useState, useEffect, Fragment} from 'react';\r\nimport API from '../../API_Interface/API_Interface'\r\n\r\n\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\n//import TextField from '@mui/material/TextField';\r\n//import Button from '@mui/material/Button';\r\n//import Box from '@mui/material/Box';\r\n//import Divider from '@mui/material/Divider';\r\n//import Avatar from '@mui/material/Avatar';\r\n//import CssBaseline from '@mui/material/CssBaseline';\r\n//import FormControlLabel from '@mui/material/FormControlLabel';\r\n//import Checkbox from '@mui/material/Checkbox';\r\n//import Link from '@mui/material/Link';\r\n//import Grid from '@mui/material/Grid';\r\n//import LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\n//import { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\n\r\n\r\nconst accountsTableAttributes = [\r\n    {\r\n        title: 'Email',\r\n        attributeDBName: 'email',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'User Name',\r\n        attributeDBName: 'userName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Account ID',\r\n        attributeDBName: 'account_id',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Role',\r\n        attributeDBName: 'role',\r\n        align: 'left'\r\n    },\r\n]; \r\n\r\nexport default function NameInputComponent() {\r\n\r\n//START display of characters in database\r\n\r\n    const [userInput, setUserInput] = useState('');\r\n    const [verifyUser, setVerifyUser] = useState(false);\r\n    const [authFailed, setAuthFailed] = useState(false);\r\n    const [user, setUser] = useState(undefined);\r\n\r\n    const handleInputChange = event => {\r\n        console.log(\"handleInputChange called.\");\r\n\r\n        setUserInput(event.target.value);\r\n        setAuthFailed(false);\r\n\r\n        if(event.key === \"Sign In\") {\r\n            console.log(\"handleKeyPress: Verify user input.\");\r\n            setVerifyUser(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n \r\n        if( ! verifyUser || userInput.length === 0)\r\n            return;\r\n\r\n        const api = new API();\r\n        async function getUserInfo() {\r\n            api.getUserInfo(userInput)\r\n                .then( userInfo => {\r\n                console.log(`api returns user info and it is: ${JSON.stringify(userInfo)}`);\r\n                const user = userInfo.user;\r\n                if( userInfo.status === \"OK\" ) {\r\n                    setUser(user);\r\n                } else  {\r\n                    setVerifyUser(false);\r\n                    setAuthFailed(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        getUserInfo();\r\n    }, [verifyUser, setUser, userInput]);\r\n\r\n    const [accounts, setAccounts] = useState([]);\r\n    console.log(`in AccountTable accounts contains is ${JSON.stringify(accounts)}`);\r\n\r\n\r\n    useEffect(() => {\r\n        const api = new API();\r\n\r\n        async function getAccounts() {\r\n            const accountsJSONString = await api.allAccounts();\r\n            console.log(`accounts from the DB ${JSON.stringify(accountsJSONString)}`);\r\n            setAccounts(accountsJSONString.data);\r\n        }\r\n\r\n        getAccounts();\r\n    }, []);\r\n    \r\n    const TRow = ({accountObject, onClick}) => {\r\n        return <TableRow\r\n            sx={{'&:last-child td, &:last-child th': {border: 0}}}\r\n        >\r\n            {\r\n                accountsTableAttributes.map((attr, idx) =>\r\n                    <TableCell key={idx} onClick={() => onClick(accountObject)}\r\n                               align={attr.align}>\r\n                        {\r\n                            accountObject[attr.attributeDBName]\r\n                        }\r\n                    </TableCell>)\r\n            }\r\n        </TableRow>\r\n    }\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n            Here is a list of all your characters that reside in your account.\r\n            </Typography> \r\n        {\r\n            accounts.length > 0 &&\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{minWidth: 650}} aria-label=\"account table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {\r\n                                    accountsTableAttributes.map((attr, idx) =>\r\n                                        <TableCell  key={idx}\r\n                                                    align={attr.align}>\r\n                                            {attr.title}\r\n                                        </TableCell>)\r\n                                }\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                accounts.map((account, idx) => (\r\n                                    <TRow accountObject={account} key={idx}/>\r\n                                ))\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n        }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import { Select, MenuItem } from '@mui/material';\r\nimport { useState } from 'react';\r\nconst roleImages = {\r\n    Tank: \"https://cdn.raiderio.net/assets/img/role_tank-6cee7610058306ba277e82c392987134.png\",\r\n    Healer: \"https://cdn.raiderio.net/assets/img/role_healer-984e5e9867d6508a714a9c878d87441b.png\",\r\n    DPS: \"https://cdn.raiderio.net/assets/img/role_dps-eb25989187d4d3ac866d609dc009f090.png\",\r\n};\r\nfunction RoleSelectionComponent({ character, handleUpdateRole }) {\r\n    const [selectedRole, setSelectedRole] = useState(character.role || '');\r\n\r\n    const handleChange = async (event) => {\r\n        const newRole = event.target.value;\r\n        setSelectedRole(newRole);  // Update the local state\r\n\r\n        try {\r\n            // Call the function to update the role\r\n            await handleUpdateRole(character.name, newRole, character.raidTeam_id);  // Ensure handleUpdateRole is passed and defined\r\n        } catch (error) {\r\n            console.error(\"Error updating role:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Select\r\n            value={selectedRole}\r\n            onChange={handleChange}\r\n            displayEmpty\r\n            renderValue={(value) => (\r\n                value ? (\r\n                    <img\r\n                        src={roleImages[value]}\r\n                        alt={`${value} role icon`}  // Alt text for accessibility\r\n                        style={{ width: '24px', height: '24px' }}  // Adjust size as needed\r\n                    />\r\n                ) : \"Select Role\"\r\n            )}\r\n        >\r\n            <MenuItem value=\"\" disabled>\r\n                Select Role\r\n            </MenuItem>  // Default \"Select Role\" option\r\n            {Object.entries(roleImages).map(([role, image]) => (\r\n                <MenuItem key={role} value={role}>\r\n                    <img\r\n                        src={image}\r\n                        alt={`${role} icon`}  // Alt text for accessibility\r\n                        style={{ width: '24px', height: '24px' }}  // Adjust size as needed\r\n                    />\r\n                </MenuItem>\r\n            ))}\r\n        </Select>\r\n    );\r\n}\r\n\r\nexport default RoleSelectionComponent;","import React, { useState, useEffect } from 'react';\r\nimport API from '../../API_Interface/API_Interface'; // Ensure this path is correct\r\nimport { Box, TextField, IconButton, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\nimport RoleSelectionComponent from './RoleSelectionComponent'\r\nconst characterTableAttributes = [\r\n    {\r\n        title: 'Image',\r\n        attributeDBName: 'imagePath',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Role',\r\n        attributeDBName: 'role',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Name',\r\n        attributeDBName: 'name',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Race',\r\n        attributeDBName: 'race',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Class',\r\n        attributeDBName: 'class',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Item Level',\r\n        attributeDBName: 'gearScore',\r\n        align: 'left'\r\n    },\r\n];\r\nconst raidBuffRequirements = {\r\n    Paladin: 2,\r\n    Druid: 1,\r\n    DemonHunter: 1,\r\n    Monk: 1,\r\n    Priest: 1,\r\n    Mage: 1,\r\n    Evoker: 1,\r\n    Hunter: 1,\r\n    Warrior: 1,\r\n    Rogue: 1,\r\n    Warlock: 1,\r\n};\r\nconst classColorMap = {\r\n    DeathKnight: '#dca3a3', // Soft Dark Red\r\n    Paladin: '#f4a7b1', // Soft Pink\r\n    Druid: '#f5c78e', // Soft Orange\r\n    Warrior: '#c0c0c0', // Light Gray\r\n    Mage: '#add8e6', // Light Blue\r\n    Hunter:'#9acd32' , // Light Green'#9acd32'\r\n    Rogue: '#f0e68c', // Khaki\r\n    Priest: '#f5f5f5', // Off White\r\n    Shaman: '#b0e0e6', // Powder Blue\r\n    Warlock: '#d8bfd8', // Thistle\r\n    Monk: '#98fb98', // Yellow Green\r\n    DemonHunter: '#d8bfd8', // Light Purple\r\n    Evoker: '#afeeee', // Pale Turquoise\r\n};\r\nfunction NameInputComponent({ raidID }) {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [characters, setCharacters] = useState([]);\r\n    const [editIdx, setEditIdx] = useState(null);\r\n    const [editedText, setEditedText] = useState('');\r\n    const api = new API();\r\n    const [expandedId, setExpandedId] = useState(null);\r\n    const [characterCount, setCharacterCount] = useState(0);\r\n    const [missingBuffs, setMissingBuffs] = useState([]);\r\n    const [isMinimalView, setIsMinimalView] = useState(false);\r\n\r\n    console.log(raidID);\r\n\r\n    function standardizeClassName(className) {\r\n        if (!className) {\r\n            console.warn(\"Encountered undefined className, defaulting to empty string.\");\r\n            return '';  // Return a default or handle it as you see fit\r\n        }\r\n        return className.replace(/\\s+/g, '');\r\n\r\n    }\r\n    const sortedCharacters = characters.sort((a, b) => {\r\n        const roleOrder = {\r\n            Tank: 1,\r\n            Healer: 2,\r\n            DPS: 3,\r\n            undefined: 4,\r\n        };\r\n        return (roleOrder[a.role] || 4) - (roleOrder[b.role] || 4);\r\n    });\r\n    function calculateMissingBuffs(characters) {\r\n        const classCounts = {};\r\n\r\n\r\n        Object.keys(raidBuffRequirements).forEach(requiredClass => {\r\n            classCounts[requiredClass] = 0;\r\n        });\r\n\r\n\r\n        characters.forEach(character => {\r\n            const className = standardizeClassName(character.class); // Ensure this is the correct property for class\r\n            if (classCounts.hasOwnProperty(className)) {\r\n                classCounts[className]++;\r\n            }\r\n        });\r\n\r\n\r\n        const missingBuffs = [];\r\n        Object.entries(raidBuffRequirements).forEach(([className, requiredCount]) => {\r\n            const countShort = requiredCount - classCounts[className];\r\n            if (countShort > 0) {\r\n                missingBuffs.push(`Missing ${countShort} ${className}${countShort > 1 ? 's' : ''}`);\r\n            }\r\n        });\r\n\r\n        return missingBuffs;\r\n    }\r\n\r\n//useEffect for all characters\r\n    useEffect(() => {\r\n        const fetchCharacters = async () => {\r\n            const response = await api.allCharacters(raidID);\r\n            console.log(response);\r\n            if (response.data) {\r\n                setCharacters(response.data);\r\n                console.log(response.data);\r\n                setCharacterCount(response.data.length);\r\n            }\r\n        };\r\n\r\n        fetchCharacters();  // Initial fetch\r\n        const intervalId = setInterval(fetchCharacters, 5000);  // Fetch every 5000 ms (5 seconds)\r\n\r\n        return () => clearInterval(intervalId);  // Clear interval on component unmount\r\n    }, [raidID]);\r\n\r\n    useEffect(() => {\r\n        if (characters.length > 0 && characters.every(char => char.class !== undefined)) {\r\n            const buffs = calculateMissingBuffs(characters);\r\n            setMissingBuffs(buffs);\r\n        } else {\r\n            console.log(\"Waiting for characters data to be fully loaded or verified...\");\r\n        }\r\n    }, [characters]);\r\n    const handleAddName = async () => {\r\n        if (name) {\r\n            try {\r\n                const characterData = await api.insertCharacter(name, raidID);\r\n                console.log(characterData);\r\n                if (characterData.error) {\r\n                    throw characterData.error;\r\n                }\r\n                setCharacters([...characters, characterData]);\r\n                setCharacterCount(prev => prev + 1);\r\n                setName('');\r\n                setIsEditing(false);\r\n            } catch (error) {\r\n                console.error('API call failed:', error);\r\n            }\r\n        }\r\n    };\r\n    const handleDelete = async (characterName) => {\r\n        try {\r\n            const encodedName = characterName;\r\n            const response = await api.deleteCharacter(encodedName);\r\n            if (response.status === 200) {\r\n                setCharacters(characters.filter(char => char.name !== characterName));\r\n                setCharacterCount(prev => prev - 1);\r\n            } else {\r\n                throw new Error('Failed to delete character');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting character:', error);\r\n            // Optionally, show an error message to the user\r\n        }\r\n    };\r\n    const handleEdit = (index) => {\r\n        setEditIdx(index);\r\n        setEditedText(characters[index].detail || '');  // Assuming 'detail' is what you want to edit\r\n    };\r\n    const saveEdit = async (index) => {\r\n        const character = characters[index];\r\n        const characterName = character.name;  // Assuming character name is stored under 'name'\r\n        const notes = editedText;  // The text currently in the editable TextField\r\n\r\n        try {\r\n            // Calling the API to update the notes in the backend\r\n            const response = await api.insertNotes(characterName, notes);\r\n            if (response.status === 200) {\r\n                // Update the local state to reflect the changes\r\n                const updatedCharacter = {...character, detail: notes};\r\n                setCharacters(characters.map((char, i) => i === index ? updatedCharacter : char));\r\n                setEditIdx(null);\r\n                setEditedText('');\r\n            } else {\r\n                // Handle possible errors here, you might want to inform the user\r\n                throw new Error('Failed to update notes');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating notes:', error);\r\n            // Optionally, display an error message to the user\r\n        }\r\n    };\r\n\r\n    const cancelEdit = () => {\r\n        setEditIdx(null);\r\n        setEditedText('');\r\n    };\r\n    const handleUpdateRole = async (characterName, newRole, raidTeam_id) => {\r\n        try {\r\n            await api.insertRole(characterName, raidTeam_id, newRole);  // Pass role, characterName, raidTeam_id\r\n        } catch (error) {\r\n            console.error('Failed to update role:', error);\r\n        }\r\n    };\r\n    return (\r\n        <Box position=\"relative\">\r\n            <Typography variant=\"h4\" sx={{mb: 2}}>\r\n                Characters\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\" sx={{mb: 2}}>\r\n                Character Count: {characterCount}/20\r\n            </Typography>\r\n\r\n            {missingBuffs.length > 0 && (\r\n                <Box sx={{mb: 2}}>\r\n                    {missingBuffs.map((buff, index) => (\r\n                        <Typography key={index} color=\"error\">\r\n                            {buff}\r\n                        </Typography>\r\n                    ))}\r\n                </Box>\r\n            )}\r\n\r\n            <Button\r\n                variant=\"outlined\"\r\n                onClick={() => setIsMinimalView((prev) => !prev)}\r\n                sx={{\r\n                    position: 'absolute',\r\n                    top: 10,\r\n                    right: 10,\r\n                    borderColor: 'black',\r\n                    color: 'black',\r\n                }}\r\n            >\r\n                {isMinimalView ? 'Expanded View' : 'Minimal View'}\r\n            </Button>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{minWidth: 650}} aria-label=\"characters table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {characterTableAttributes\r\n                                .filter(\r\n                                    (attr) => !isMinimalView || ['Role', 'Name', 'Class'].includes(attr.title)\r\n                                ) // Only display \"Role,\" \"Name,\" \"Class\" in Minimal View\r\n                                .map((attr) => (\r\n                                    <TableCell key={attr.title} align={attr.align}>\r\n                                        {attr.title}\r\n                                    </TableCell>\r\n                                ))}\r\n                            {!isMinimalView && (\r\n                                <TableCell align=\"center\">Actions</TableCell>  // Display \"Actions\" in Expanded View\r\n                            )}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {sortedCharacters.map((character, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <TableRow\r\n                                    key={index}\r\n                                    sx={{\r\n                                        backgroundColor:\r\n                                            classColorMap[standardizeClassName(character.class)] || '#FFFFFF',\r\n                                    }}\r\n                                >\r\n                                    {characterTableAttributes\r\n                                        .filter(\r\n                                            (attr) => !isMinimalView || ['Role', 'Name', 'Class'].includes(attr.title)\r\n                                        )\r\n                                        .map((attr) => (\r\n                                            <TableCell key={attr.title} align={attr.align}>\r\n                                                {attr.attributeDBName === 'imagePath' && !isMinimalView ? (\r\n                                                    <img\r\n                                                        src={character[attr.attributeDBName]}\r\n                                                        alt={`Avatar of ${character.name}`}\r\n                                                        style={{width: '70px', height: '70px'}}\r\n                                                    />\r\n                                                ) : attr.attributeDBName === 'role' ? (\r\n                                                    <RoleSelectionComponent\r\n                                                        character={character}\r\n                                                        handleUpdateRole={handleUpdateRole}  // Role selection\r\n                                                    />\r\n                                                ) : (\r\n                                                    character[attr.attributeDBName]  // Display other values\r\n                                                )}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                    {!isMinimalView && (\r\n                                        <TableCell align=\"center\">\r\n                                            <IconButton\r\n                                                onClick={() => setExpandedId(expandedId === index ? null : index)}>\r\n                                                {expandedId === index ? <ExpandLessIcon/> : <ExpandMoreIcon/>}\r\n                                            </IconButton>\r\n                                            <IconButton onClick={() => handleEdit(index)}>\r\n                                                <MoreVertIcon/>\r\n                                            </IconButton>\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                color=\"error\"\r\n                                                onClick={() => handleDelete(character.name)}\r\n                                            >\r\n                                                Delete\r\n                                            </Button>\r\n                                            {editIdx === index && (\r\n                                                <Box>\r\n                                                    <TextField\r\n                                                        value={editedText}\r\n                                                        onChange={(e) => setEditedText(e.target.value)}\r\n                                                        size=\"small\"\r\n                                                    />\r\n                                                    <Button onClick={() => saveEdit(index)}>Save</Button>\r\n                                                    <Button onClick={cancelEdit}>Cancel\r\n                                                    </Button>\r\n                                                </Box>\r\n                                            )}\r\n                                        </TableCell>\r\n                                    )}\r\n                                </TableRow>\r\n                                {expandedId === index && (\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={characterTableAttributes.length + 1}>\r\n                                            <Typography variant=\"body2\" style={{whiteSpace: 'pre-wrap'}}>\r\n                                                {character.notes || 'No notes available'}\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )}\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {isEditing && (\r\n                <TextField\r\n                    label=\"Enter Character Name\"\r\n                    variant=\"outlined\"\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    onKeyPress={(e) => e.key === 'Enter' && handleAddName()}\r\n                    fullWidth\r\n                    sx={{\r\n                        borderColor: 'black',\r\n                        color: 'black',\r\n                        '& .MuiOutlinedInput-root': {\r\n                            '& fieldset': {\r\n                                borderColor: 'black',\r\n                            },\r\n                            '&:hover fieldset': {\r\n                                borderColor: 'black',\r\n                            },\r\n                            '&.Mui-focused fieldset': {\r\n                                borderColor: 'black',\r\n                            },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n            <IconButton\r\n                onClick={() => setIsEditing(true)}\r\n                aria-label=\"add character\"\r\n                size=\"large\"\r\n                sx={{fontSize: '3rem', mt: 2}}\r\n            >\r\n                <AddIcon sx={{fontSize: 'inherit'}}/>\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n}\r\nexport default NameInputComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, InputLabel, MenuItem, FormHelperText, FormControl, Select, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setMakeRaidMode}) {\r\n  const [teamName, setTeamName] = useState(\"\");\r\n  const [numPlayers, setNumPlayers] = useState(\"\");\r\n  const [raidDay_A, setRaidDayA] = useState(\"\");\r\n  const [raidDay_B, setRaidDayB] = useState(\"\");\r\n  const [raidTime, setRaidTime] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [raidCheck, setRaidCheck] = useState(false);\r\n\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Raid Team Called');\r\n    setRaidCheck(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    console.log('Raid Mode called');\r\n    setMakeRaidMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR RAID\r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0) return;\r\n    const api = new API();\r\n    async function checkRaidName() {\r\n        api.checkRaidName(teamName)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkRaidName();\r\n  }, [raidCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0 || numPlayers.length === 0 || raidTime.length === 0) return;\r\n    const api = new API();\r\n    async function createRaidTeam() {\r\n        api.createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Raid Team Created!\");\r\n          setMakeRaidMode(false);\r\n        } else {\r\n          alert(\"Creation NOT Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    createRaidTeam();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Create Raid Team\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"teamName\"\r\n                  label=\"Team Name\"\r\n                  name=\"teamName\"\r\n                  value={teamName}\r\n                  onChange={(n) => setTeamName(n.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"numPlayers\"\r\n                  label=\"Raid Team Size\"\r\n                  name=\"numPlayers\"\r\n                  value={numPlayers}\r\n                  onChange={(p) => setNumPlayers(p.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd1\">Raid Day 1</InputLabel>\r\n                    <Select\r\n                    id=\"rd1\"\r\n                    value={raidDay_A}\r\n                    label=\"Raid Day 1\"\r\n                    onChange={(a) => setRaidDayA(a.target.value)}\r\n                    >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                    <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                    <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                    <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                    <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                    <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                    <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd2\">Raid Day 2</InputLabel>\r\n                        <Select\r\n                        id=\"rd2\"\r\n                        value={raidDay_B}\r\n                        label=\"Raid Day 2\"\r\n                        onChange={(b) => setRaidDayB(b.target.value)}\r\n                        >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n                        <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                        <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                        <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                        <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                        <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                        <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                        <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                        </Select>\r\n                    <FormHelperText>Select 'None' if only 1 raid day</FormHelperText>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"raidTime\"\r\n                  label=\"Time of Raid\"\r\n                  name=\"raidTime\"\r\n                  value={raidTime}\r\n                  onChange={(t) => setRaidTime(t.target.value)}\r\n                />\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Raid Team\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleGoBack} >\r\n                  Already have a Raid Team? Go back\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, {useState, useEffect, Fragment} from 'react';\r\nimport API from '../../API_Interface/API_Interface'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport Box from '@mui/material/Box';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nconst raidteamsTableAttributes = [\r\n    {\r\n        title: 'Raid ID',\r\n        attributeDBName: 'raidTeam_id',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Team Name',\r\n        attributeDBName: 'teamName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Size',\r\n        attributeDBName: 'numPlayers',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Day 1',\r\n        attributeDBName: 'raidDay_A',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Day 2',\r\n        attributeDBName: 'raidDay_B',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Time (PST)',\r\n        attributeDBName: 'raidTime',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Players on Bench',\r\n        attributeDBName: 'numBench',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Trials',\r\n        attributeDBName: 'numTrial',\r\n        align: 'left'\r\n    },\r\n]; \r\n\r\nconst characterTableAttributes = [\r\n    {\r\n        title: 'Team Name',\r\n        attributeDBName: 'teamName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Name',\r\n        attributeDBName: 'name',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Role',\r\n        attributeDBName: 'role',\r\n        align:'left'\r\n    },\r\n    {\r\n        title: 'Race',\r\n        attributeDBName: 'race',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Class',\r\n        attributeDBName: 'class',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Item Level',\r\n        attributeDBName: 'gearScore',\r\n        align: 'left'\r\n    },\r\n];\r\n\r\n\r\nexport default function CharacterTable({setMakeRaidMode, setAddCharMode, setOneRaidMode, setRaid, setChars }) {\r\n    const [characters, setCharacters] = useState([]);\r\n    const [raidteams, setRaidTeams] = useState([]);\r\n    const [openRows, setOpenRows] = useState([]);\r\n    const [buttonClicked, setButtonClicked] = useState(false); // State to track button click\r\n    const [raidTeam_id, setRaidTeam_id] = useState(null);\r\n    const [deleteMode, setDeleteMode] = useState(false);\r\n    const [removeMode, setRemoveMode] = useState(false);\r\n    const [character_id, setCharacter_id] = useState(null);\r\n    const [raidTeamName, setRaidTeamName] = useState(\"\");\r\n    const [highlightMode, setHighlightMode] = useState(false);\r\n    const [hoveredIdx, setHoveredIdx] = useState(null);\r\n    const [hoveredCIdx, setCHoveredIdx] = useState(null);\r\n    const [reloadTable, setReloadTable] = useState(false);\r\n    //ALL TEAMS\r\n\r\n    useEffect(() => {\r\n        const api = new API();\r\n\r\n        async function getRaidTeams() {\r\n            const raidteamsJSONString = await api.allRaidTeams();\r\n            console.log(`raidteams from the DB ${JSON.stringify(raidteamsJSONString)}`);\r\n            setRaidTeams(raidteamsJSONString.data);\r\n        }\r\n        setReloadTable(false);\r\n        getRaidTeams();\r\n    }, [reloadTable]);\r\n\r\n    //DROP DOWN ARROW\r\n    \r\n    useEffect(() => {\r\n        if (raidTeam_id) { // Only run the effect if raidTeam_id is not null\r\n            const api = new API();\r\n    \r\n            async function charsForRaidTeam() {\r\n                const charactersJSONString = await api.charsForRaidTeam(JSON.stringify(raidTeam_id));\r\n                console.log(JSON.stringify(raidTeam_id));\r\n                console.log(`characters from the DB ${JSON.stringify(charactersJSONString)}`);\r\n                setCharacters(charactersJSONString.data);\r\n                setOpenRows(new Array(charactersJSONString.data.length).fill(false));\r\n            }\r\n    \r\n            charsForRaidTeam();\r\n        }\r\n    }, [raidTeam_id]); // Add raidTeam_id to the dependency array\r\n     // Execute useEffect whenever buttonClicked changes\r\n\r\n    //REMOVE CHARACTER\r\n\r\n    useEffect(() => {\r\n        if (removeMode) {\r\n            const api = new API();\r\n            async function removeChar() {\r\n                try {\r\n                    console.log('here you are');\r\n                    console.log(character_id);\r\n                    const userInfo = await api.removeChar(JSON.stringify(character_id));\r\n                    console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n                } catch (error) {\r\n                    console.error('Failed to remove character from team:', error);\r\n                }\r\n            }\r\n            \r\n            removeChar().then(() => {\r\n                setRemoveMode(false); // Reset deleteMode to prevent repeated deletion\r\n                setReloadTable(true);\r\n            });\r\n        }\r\n    }, [removeMode, character_id]);\r\n\r\n    //DELETE TEAM\r\n\r\n    useEffect(() => {\r\n        if (deleteMode) {\r\n            const api = new API();\r\n            async function deleteRaid() {\r\n                try {\r\n                    console.log('here you are');\r\n                    console.log(raidTeam_id);\r\n                    const userInfo = await api.deleteRaid(JSON.stringify(raidTeam_id));\r\n                    console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n                } catch (error) {\r\n                    console.error('Failed to delete raid team:', error);\r\n                }\r\n            }\r\n            \r\n            deleteRaid().then(() => {\r\n                setDeleteMode(false); // Reset deleteMode to prevent repeated deletion\r\n                setReloadTable(true);\r\n            });\r\n        }\r\n    }, [deleteMode, raidTeam_id]);\r\n\r\n\r\n    //HANDLERS\r\n\r\n    const handleRaidClick = (raid) => {\r\n        console.log(raid);\r\n        console.log(characters);\r\n        setRaid(raid);\r\n        setChars(characters);\r\n        setOneRaidMode(true);\r\n    };\r\n\r\n    const handleMouseEnter = (index) => {\r\n        setHoveredIdx(index);  // Set the currently hovered row index\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setHoveredIdx(null);  // Clear the hovered row index\r\n    };\r\n\r\n    const handleCMouseEnter = (index) => {\r\n        setCHoveredIdx(index);  // Set the currently hovered row index\r\n    };\r\n\r\n    const handleCMouseLeave = () => {\r\n        setCHoveredIdx(null);  // Clear the hovered row index\r\n    };\r\n\r\n    \r\n\r\n    const handleRowToggle = (index) => {\r\n        setRaidTeam_id(index.raidTeam_id);\r\n        const newOpenRows = [...openRows];\r\n        newOpenRows[index] = !newOpenRows[index];\r\n        setOpenRows(newOpenRows);\r\n    };\r\n\r\n    const handleButtonClick = (raidTeam_id) => {\r\n        setButtonClicked(true); // Set buttonClicked to true when button is clicked\r\n        setRaidTeam_id(raidTeam_id);\r\n    };\r\n\r\n    const handleRemove = async (char, event) => {\r\n        event.stopPropagation(); // This stops the event from bubbling up to the parent elements.\r\n        console.log(char.raidTeam_id);\r\n        setCharacter_id(char.character_id);\r\n        setRemoveMode(true);\r\n        console.log(\"Remove clicked for\", char);\r\n    };\r\n\r\n    const handleDelete = (raidteam, event) => {\r\n        event.stopPropagation(); // This stops the event from bubbling up to the parent elements.\r\n        console.log(raidteam.raidTeam_id);\r\n        setRaidTeam_id(raidteam.raidTeam_id); // Assuming you rename setRaidTeam to setRaidTeamId for clarity\r\n        setDeleteMode(true);\r\n        console.log(\"Delete clicked for\", raidteam);\r\n    };\r\n    \r\n    return (\r\n        <Fragment>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6} sm={6}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <Button variant=\"outlined\" color=\"success\" onClick={() => setMakeRaidMode(true)}>\r\n                            Add Raid Team\r\n                            <IconButton\r\n                                aria-label=\"add character\"\r\n                                size=\"large\"\r\n                                color=\"green\"\r\n                                sx={{ fontSize: '2rem', ml: 1 }}\r\n                            >\r\n                                <AddIcon sx={{ fontSize: 'inherit' }} />\r\n                            </IconButton>\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid> \r\n    \r\n            {raidteams.length > 0 && (\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"market table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell></TableCell>\r\n                                {raidteamsTableAttributes.map((attr, idx) => (\r\n                                    <TableCell key={idx} align={attr.align}>\r\n                                        {attr.title}\r\n                                    </TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {raidteams.map((team, idx) => (\r\n                                <Fragment key={idx}>\r\n                                    <TableRow sx={{ backgroundColor: idx === hoveredIdx ? '#CFD8D7' : 'inherit' }}\r\n                                        onMouseEnter={() => handleMouseEnter(idx)}\r\n                                        onMouseLeave={handleMouseLeave}\r\n                                    >\r\n                                        <TableCell>\r\n                                            <IconButton key={idx}\r\n                                                aria-label=\"expand row\"\r\n                                                size=\"small\"\r\n                                                onClick={() => {\r\n                                                    \r\n                                                    handleRowToggle(idx);\r\n                                                    handleButtonClick(raidteams[idx]['raidTeam_id']);\r\n                                                }}\r\n                                            >\r\n                                                {openRows[idx] ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                        {raidteamsTableAttributes.map((attr, idx) => (\r\n                                            <TableCell key={idx} align={attr.align} onClick={() => handleRaidClick(team)}>\r\n                                                {team[attr.attributeDBName]}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                        <TableCell align=\"center\">\r\n                                            <Button variant=\"outlined\" color=\"error\" onClick={(event) => handleDelete(team, event)}>\r\n                                                Delete\r\n                                            </Button>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    {openRows[idx] && (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={raidteamsTableAttributes.length + 1}>\r\n                                                <TableContainer component={Paper}>\r\n                                                    <Table size=\"small\" sx={{ backgroundColor: '#E6EEF0' }}> \r\n                                                        <TableHead>\r\n                                                            <TableRow>\r\n                                                                {characterTableAttributes.map((attr, idx) => (\r\n                                                                    <TableCell key={idx} align={attr.align}>\r\n                                                                        {attr.title}\r\n                                                                    </TableCell>\r\n                                                                ))}\r\n                                                            </TableRow>\r\n                                                        </TableHead>\r\n                                                        <TableBody>\r\n                                                            {Array.isArray(characters) && characters.map((character, idx) => (\r\n\r\n                                                                <TableRow key={idx} sx={{ backgroundColor: idx === hoveredCIdx ? '#CFD8D7' : 'inherit' }}\r\n                                                                onMouseEnter={() => handleCMouseEnter(idx)}\r\n                                                                onMouseLeave={handleCMouseLeave}>\r\n                                                                    {characterTableAttributes.map((attr, idx) => (\r\n                                                                        <TableCell key={idx} align={attr.align}>\r\n                                                                           {character[attr.attributeDBName]}\r\n                                                                        </TableCell>\r\n                                                                    ))}\r\n                                                                    <TableCell align=\"center\">\r\n                                                                        <Button variant=\"outlined\" color=\"error\" onClick={(event) => handleRemove(character, event)}>\r\n                                                                            Remove\r\n                                                                        </Button>\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            ))}\r\n                                                        </TableBody>\r\n                                                    </Table>\r\n                                                </TableContainer>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </Fragment>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            )}\r\n        </Fragment>\r\n    );\r\n    \r\n    \r\n};\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, InputLabel, MenuItem, FormHelperText, FormControl, Select, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setMakeRaidMode}) {\r\n  const [teamName, setTeamName] = useState(\"\");\r\n  const [numPlayers, setNumPlayers] = useState(\"\");\r\n  const [raidDay_A, setRaidDayA] = useState(\"\");\r\n  const [raidDay_B, setRaidDayB] = useState(\"\");\r\n  const [raidTime, setRaidTime] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [raidCheck, setRaidCheck] = useState(false);\r\n\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Raid Team Called');\r\n    setRaidCheck(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    console.log('Raid Mode called');\r\n    setMakeRaidMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR RAID\r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0) return;\r\n    const api = new API();\r\n    async function checkRaidName() {\r\n        api.checkRaidName(teamName)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkRaidName();\r\n  }, [raidCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0 || numPlayers.length === 0 || raidTime.length === 0) return;\r\n    const api = new API();\r\n    async function createRaidTeam() {\r\n        api.createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Raid Team Created!\");\r\n          setMakeRaidMode(false);\r\n        } else {\r\n          alert(\"Creation NOT Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    createRaidTeam();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Create Raid Team\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"teamName\"\r\n                  label=\"Team Name\"\r\n                  name=\"teamName\"\r\n                  value={teamName}\r\n                  onChange={(n) => setTeamName(n.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"numPlayers\"\r\n                  label=\"Raid Team Size\"\r\n                  name=\"numPlayers\"\r\n                  value={numPlayers}\r\n                  onChange={(p) => setNumPlayers(p.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd1\">Raid Day 1</InputLabel>\r\n                    <Select\r\n                    id=\"rd1\"\r\n                    value={raidDay_A}\r\n                    label=\"Raid Day 1\"\r\n                    onChange={(a) => setRaidDayA(a.target.value)}\r\n                    >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                    <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                    <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                    <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                    <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                    <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                    <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n                <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"raidTime\"\r\n                  label=\"Time of Raid\"\r\n                  name=\"raidTime\"\r\n                  value={raidTime}\r\n                  onChange={(t) => setRaidTime(t.target.value)}\r\n                />\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Raid Team\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleGoBack} >\r\n                  Already have a Raid Team? Go back\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, { Fragment, useState } from 'react';\r\n//import Calendar from '../Calendar/Calendar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add'; // Make sure to import AddIcon\r\nimport Grid from '@mui/material/Grid';\r\nimport { BarChart } from '@mui/x-charts/BarChart';\r\nimport { Divider } from '@mui/material';\r\nimport { PieChart } from '@mui/x-charts/PieChart';\r\nimport Character from \"../Characters/Characters\";\r\n\r\nexport default function OneRaidTeam({ raid, chars}) {\r\n    // Assuming you manage the state of adding a character to the raid\r\n    const [addCharMode, setAddCharMode] = useState(false);\r\n    const [viewCharacters, setViewCharacters] = useState(false);\r\n\r\n    const roleCount = {};\r\n    \r\n    chars.forEach(character => {\r\n        const role = character.role;\r\n        roleCount[role] = (roleCount[role] || 0) + 1;\r\n    });\r\n\r\n    console.log(roleCount)\r\n\r\n    return (\r\n        <Fragment>\r\n            \r\n            <Grid container spacing={2}>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"h3\">\r\n                        Team Name: {raid.teamName} \r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"h3\">\r\n                        Raid Days: {raid.raidDay_A} / {raid.raidDay_B} \r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"h3\">\r\n                        Raid Time: {raid.raidTime}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"h3\">\r\n                        Team Size: {raid.numPlayers}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Divider />\r\n            \r\n                    \r\n                \r\n            <BarChart\r\n                series={[\r\n                    { data: chars.map(char => char.gearScore) } // Array of gear scores for each character\r\n                ]}\r\n                height={300}\r\n                xAxis={[\r\n                    { \r\n                        data: chars.map(char => char.name), \r\n                        scaleType: 'band',\r\n                        tickLabelAngle: -45, // Rotate labels by -45 degrees\r\n                        tickLabelProps: () => ({\r\n                            textAnchor: 'end', // Align text to the end of the tick\r\n                            fontSize: '10px', // Adjust font size if necessary\r\n                            dy: '0.5em' // Adjust vertical position of label\r\n                        })\r\n                    }\r\n                ]}\r\n                margin={{ top: 10, bottom: 60, left: 40, right: 10 }} // Increase bottom margin to accommodate rotated labels\r\n                />  \r\n\r\n                \r\n\r\n\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6} sm={6}>\r\n                <PieChart\r\n                    series={[\r\n                        {\r\n                            data: Object.keys(roleCount).map(role => ({\r\n                                id: role,\r\n                                value: roleCount[role],\r\n                                label: `${role}: ${roleCount[role]}`\r\n                            }))\r\n                        }\r\n                    ]}\r\n                    width={400}\r\n                    height={200}\r\n                />\r\n\r\n                </Grid>\r\n                <Grid item xs={6} sm={6}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Button\r\n                            variant=\"outlined\"\r\n                            color=\"success\"\r\n                            onClick={() => setViewCharacters(true)}  // Set state to show characters\r\n                        >\r\n                            View Characters\r\n                            <IconButton\r\n                                aria-label=\"add character\"\r\n                                size=\"large\"\r\n                                color=\"success\"\r\n                                sx={{ fontSize: '2rem', ml: 1 }}\r\n                            >\r\n                                <AddIcon sx={{ fontSize: 'inherit' }} />\r\n                            </IconButton>\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {/* Conditionally Render Character Component with Raid ID */}\r\n            {viewCharacters && (\r\n                <Character raidID={raid.raidTeam_id} />  // Pass the raid ID to the Character component\r\n            )}\r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { Fragment, useState } from 'react';\r\nimport MakeRaidTeam from './MakeRaidTeam';\r\nimport CharsForRaidTeam from './CharsForRaidTeam';\r\nimport AddCharToTeam from './AddCharToTeam';\r\nimport OneRaidTeam from './OneRaidTeam';\r\n\r\nexport default function RaidTeams() {\r\n    \r\n    const [makeRaidMode, setMakeRaidMode] = useState(false);    \r\n    const [addCharMode, setAddCharMode] = useState(false);\r\n    const [raid, setRaid] = useState(undefined);\r\n    const [chars, setChars] = useState([]);\r\n    const [oneRaidMode, setOneRaidMode] = useState(false);\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {   \r\n                oneRaidMode ? (\r\n               <OneRaidTeam raid={raid} chars={chars} /> \r\n            )\r\n              :  makeRaidMode ? (\r\n                <MakeRaidTeam setMakeRaidMode={setMakeRaidMode} />\r\n            ) : addCharMode ? (\r\n                <AddCharToTeam setAddCharMode={setAddCharMode}/>\r\n            )  :    (\r\n                <CharsForRaidTeam \r\n                    setOneRaidMode={setOneRaidMode} \r\n                    setRaid={setRaid}\r\n                    setChars={setChars}\r\n                    setMakeRaidMode={setMakeRaidMode} \r\n                    setAddCharMode={setAddCharMode} \r\n                />\r\n            )\r\n        \r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n","import React, {Fragment} from 'react';\nimport Typography from '@mui/material/Typography';\n\nexport default function Summary(props) {\n    return (\n        <Fragment>\n            \n            <Typography component=\"div\" variant='h3'>\n                Home\n            </Typography>\n        </Fragment>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, InputLabel, MenuItem, FormHelperText, FormControl, Select, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setMakeGuildMode, account_id}) {\r\n  const [guild_name, setGuildName] = useState(\"\");\r\n  const [faction, setFaction] = useState(\"\");\r\n  const [gm_name, setGuildMaster] = useState(\"\");\r\n  const [realm, setRealm] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [guildCheck, setGuildCheck] = useState(false);\r\n\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Guild Called');\r\n    setGuildCheck(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    console.log('Guild Mode called');\r\n    setMakeGuildMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR GUILD\r\n\r\n  useEffect(() => {\r\n    if (guild_name.length === 0) return;\r\n    const api = new API();\r\n\r\n    async function checkForGuild() {\r\n        api.checkForGuild(guild_name)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkForGuild();\r\n  }, [guildCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (guild_name.length === 0 || faction.length === 0 || gm_name.length === 0 || realm.length === 0) return;\r\n    const api = new API();\r\n    async function createGuild() {\r\n        api.createGuild(guild_name, faction, gm_name, realm)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Guild Created!\");\r\n          setMakeGuildMode(false);\r\n        } else {\r\n          alert(\"Creation NOT Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    createGuild();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Create Guild\r\n          </Typography>\r\n            <Box component=\"form\" sx={{ mt: 3 }}>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    id=\"guild_name\"\r\n                    label=\"Guild Name\"\r\n                    name=\"guild_name\"\r\n                    value={guild_name}\r\n                    onChange={(n) => setGuildName(n.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                      <InputLabel id=\"fac\">Faction</InputLabel>\r\n                      <Select\r\n                      id=\"fac\"\r\n                      value={faction}\r\n                      label=\"Faction\"\r\n                      onChange={(a) => setFaction(a.target.value)}\r\n                      >\r\n                      <MenuItem value=\"\">\r\n                          <em>None</em>\r\n                      </MenuItem>\r\n                      <MenuItem value={'Horde'}>Horde</MenuItem>\r\n                      <MenuItem value={'Alliance'}>Alliance</MenuItem>\r\n                      </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    id=\"realm\"\r\n                    label=\"Realm Name\"\r\n                    name=\"realm\"\r\n                    value={realm}\r\n                    onChange={(r) => setRealm(r.target.value)}\r\n                  />\r\n                </Grid>\r\n              \r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    id=\"gm_name\"\r\n                    label=\"Guild Master\"\r\n                    name=\"gm_name\"\r\n                    value={gm_name}\r\n                    onChange={(t) => setGuildMaster(t.target.value)}\r\n                  />\r\n                </Grid>\r\n                \r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Guild\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleGoBack} >\r\n                  Already have a Guild? Go back\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, {useState, useEffect, Fragment} from 'react';\r\nimport API from '../../API_Interface/API_Interface'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport Box from '@mui/material/Box';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nconst guildTableAttributes = [\r\n    {\r\n        title: 'Guild Name',\r\n        attributeDBName: 'teamName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Server',\r\n        attributeDBName: 'realm',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Faction',\r\n        attributeDBName: 'faction',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Members',\r\n        attributeDBName: 'num_members',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Guild Master',\r\n        attributeDBName: 'gm_name',\r\n        align: 'left'\r\n    },\r\n];\r\n\r\n\r\nexport default function GuildTable({setMakeGuildMode}) {\r\n    //const [characters, setCharacters] = useState([]);\r\n    const [guilds, setGuild] = useState([]);\r\n    const [openRows, setOpenRows] = useState([]);\r\n    const [raids, setRaids] = useState([]);\r\n    const [guildName, setGuildName] = useState('');\r\n    const [buttonClicked, setButtonClicked] = useState(false); // State to track button click\r\n    const [guild_id, setGuild_id] = useState(null);\r\n    const [deleteMode, setDeleteMode] = useState(false);\r\n    const [hoveredIdx, setHoveredIdx] = useState(null);\r\n    const [reloadTable, setReloadTable] = useState(false);\r\n\r\n    //GET GUILD\r\n\r\n   \r\n\r\n    //DROP DOWN ARROW\r\n    /*\r\n    useEffect(() => {\r\n        if (guild_id) { // Only run the effect if raidTeam_id is not null\r\n            const api = new API();\r\n    \r\n            async function raidsForGuild() {\r\n                const charactersJSONString = await api.raidsForGuild(JSON.stringify(guild_id));\r\n                console.log(JSON.stringify(guild_id));\r\n                console.log(`characters from the DB ${JSON.stringify(charactersJSONString)}`);\r\n                setCharacters(charactersJSONString.data);\r\n                setOpenRows(new Array(charactersJSONString.data.length).fill(false));\r\n            }\r\n    \r\n            raidsForGuild();\r\n        }\r\n    }, [guild_id]); // Add raidTeam_id to the dependency array\r\n     // Execute useEffect whenever buttonClicked changes\r\n    \r\n    //REMOVE CHARACTER\r\n\r\n    useEffect(() => {\r\n        if (removeMode) {\r\n            const api = new API();\r\n            async function removeChar() {\r\n                try {\r\n                    console.log('here you are');\r\n                    console.log(character_id);\r\n                    const userInfo = await api.removeChar(JSON.stringify(character_id));\r\n                    console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n                } catch (error) {\r\n                    console.error('Failed to remove character from team:', error);\r\n                }\r\n            }\r\n            \r\n            removeChar().then(() => {\r\n                setRemoveMode(false); // Reset deleteMode to prevent repeated deletion\r\n                setReloadTable(true);\r\n            });\r\n        }\r\n    }, [removeMode, character_id]);\r\n    \r\n    //DELETE Guild\r\n\r\n    useEffect(() => {\r\n        if (deleteMode) {\r\n            const api = new API();\r\n            async function deleteGuild() {\r\n                try {\r\n                    console.log('here you are');\r\n                    console.log(guild_id);\r\n                    const userInfo = await api.deleteGuild(JSON.stringify(guild_id));\r\n                    console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n                } catch (error) {\r\n                    console.error('Failed to delete raid team:', error);\r\n                }\r\n            }\r\n            \r\n            deleteGuild().then(() => {\r\n                setDeleteMode(false); // Reset deleteMode to prevent repeated deletion\r\n                setReloadTable(true);\r\n            });\r\n        }\r\n    }, [deleteMode, guild_id]);\r\n\r\n\r\n    //HANDLERS\r\n\r\n    const handleGuildClick = (guild) => {\r\n        console.log(guild);\r\n        console.log(raids);\r\n        setGuild(guild);\r\n        setRaids(raids);\r\n    };\r\n\r\n    const handleMouseEnter = (index) => {\r\n        setHoveredIdx(index);  // Set the currently hovered row index\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setHoveredIdx(null);  // Clear the hovered row index\r\n    };\r\n    \r\n    const handleButtonClick = (guild_id) => {\r\n        setButtonClicked(true); // Set buttonClicked to true when button is clicked\r\n        setGuild_id(guild_id);\r\n    };\r\n\r\n/*\r\n    const handleRowToggle = (index) => {\r\n        setRaidTeam_id(index.raidTeam_id);\r\n        const newOpenRows = [...openRows];\r\n        newOpenRows[index] = !newOpenRows[index];\r\n        setOpenRows(newOpenRows);\r\n    };\r\n\r\n    const handleRemove = async (char, event) => {\r\n        event.stopPropagation(); // This stops the event from bubbling up to the parent elements.\r\n        console.log(char.raidTeam_id);\r\n        setCharacter_id(char.character_id);\r\n        setRemoveMode(true);\r\n        console.log(\"Remove clicked for\", char);\r\n    };\r\n\r\n    const handleDelete = (guild, event) => {\r\n        event.stopPropagation(); // This stops the event from bubbling up to the parent elements.\r\n        console.log(guild.guild_id);\r\n        setGuild_id(guild.guild_id); // Assuming you rename setRaidTeam to setRaidTeamId for clarity\r\n        setDeleteMode(true);\r\n        console.log(\"Delete clicked for\", guild);\r\n    };\r\n*/\r\n\r\n\r\n    useEffect(() => {\r\n        const api = new API();\r\n\r\n        async function getGuilds() {\r\n            const guildJSONString = await api.getGuild();\r\n            console.log(`guild from the DB ${JSON.stringify(guildJSONString)}`);\r\n            setGuild(guildJSONString.data);\r\n        }\r\n        \r\n        getGuilds();\r\n    }, []);\r\n\r\n    const TRow = ({guildObject, onClick}) => {\r\n        return <TableRow\r\n            sx={{'&:last-child td, &:last-child th': {border: 0}}}\r\n        >\r\n            {\r\n                guildTableAttributes.map((attr, idx) =>\r\n                    <TableCell key={idx} onClick={() => onClick(guildObject)}\r\n                               align={attr.align}>\r\n                        {\r\n                            guildObject[attr.attributeDBName]\r\n                        }\r\n                    </TableCell>)\r\n            }\r\n        </TableRow>\r\n    }\r\n    \r\n    return (\r\n        <Fragment>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6} sm={6}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <Button variant=\"outlined\" color=\"success\" onClick={() => setMakeGuildMode(true)}>\r\n                            Create Guild\r\n                            <IconButton\r\n                                aria-label=\"Create Guild\"\r\n                                size=\"large\"\r\n                                color=\"green\"\r\n                                sx={{ fontSize: '2rem', ml: 1 }}\r\n                            >\r\n                                <AddIcon sx={{ fontSize: 'inherit' }} />\r\n                            </IconButton>\r\n                            \r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid> \r\n    \r\n           \r\n        {\r\n            guilds.length > 0 &&\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{minWidth: 650}} aria-label=\"guild table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {\r\n                                    guildTableAttributes.map((attr, idx) =>\r\n                                        <TableCell  key={idx}\r\n                                                    align={attr.align}>\r\n                                            {attr.title}\r\n                                        </TableCell>)\r\n                                }\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                guilds.map((guild, idx) => (\r\n                                    <TRow guildObject={guild} key={idx}/>\r\n                                ))\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n        }\r\n       \r\n        </Fragment>\r\n    );\r\n    \r\n    \r\n}\r\n\r\n","import React, { Fragment, useState } from 'react';\r\nimport MakeGuild from './MakeGuild';\r\nimport RaidsForGuild from './RaidsForGuild';\r\n\r\n//import AddCharToTeam from './AddCharToTeam';\r\n//import OneRaidTeam from './OneRaidTeam';\r\n\r\nexport default function Guilds( {account_id} ) {\r\n    const [makeGuildMode, setMakeGuildMode] = useState(false);    \r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {   \r\n             makeGuildMode ? (\r\n                <MakeGuild account_id={account_id} setMakeGuildMode={setMakeGuildMode} />\r\n            ) :    (\r\n                <RaidsForGuild account_id={account_id} setMakeGuildMode={setMakeGuildMode}/>\r\n            )\r\n        \r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n","import Accounts from '../Components/Accounts/Accounts';\nimport Characters from '../Components/Characters/Characters';\nimport RaidTeams from '../Components/RaidTeams/RaidTeams';\nimport Summary from '../Components/SummaryPage/Summary';\nimport Guild from '../Components/Guilds/Guilds'\n\nconst presentationComponents = (props) => {\n    return [\n        {\n            title: 'Home',\n            component: <Summary/>\n        },\n        {\n            title: 'Guild',\n            component: <Guild/>\n        },\n        {\n            title: 'Raid Team',\n            component: <RaidTeams/>\n        },\n        {\n            title: 'Account',\n            component: <Accounts/>\n        },\n        {\n            title: 'Add Character',\n            component: <Characters/>\n        },\n    ];\n};\n\n\nexport {presentationComponents};\n","import React, { Fragment, useState } from \"react\";\nimport { styled, useTheme } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Drawer from \"@mui/material/Drawer\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport MuiAppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport List from \"@mui/material/List\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport {\n  presentationComponents,\n  containerComponents,\n} from \"./MenuPresentationComponents\";\nimport Button from \"@mui/material/Button\";\n\n//const drawerWidth = 240;\n\nconst Main = styled(\"main\")(\n  ({ theme }) => ({\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    marginLeft: 0, // Keep margin left constant at 0\n  })\n);\n\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== \"open\",\n})(({ theme}) => ({\n  transition: theme.transitions.create([\"margin\", \"width\"], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  })\n}));\n\nconst DrawerHeader = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n  justifyContent: \"flex-end\",\n}));\n\n// Component used to hold the navigation bar\nconst TopBar = ({ open, selectedItem, handleSelectedItem, logoutAction }) => {\n  // This component is responsible for rendering the Toolbar that is drawn\n  // at the top of the drawer.\n\n  return (\n    <Fragment>\n      <AppBar position=\"fixed\" open={false}>\n        <Toolbar>\n          <List>\n            <PresentationListItems\n              selectedItem={selectedItem}\n              onClick={handleSelectedItem}\n              menuItemTitles={presentationComponents().map(\n                (comp) => comp.title\n              )}\n            />\n          </List>\n          <Box width=\"100%\" justifyContent=\"right\" flex={1}>\n            <Typography\n              variant=\"h7\"\n              noWrap\n              component=\"div\"\n              align=\"right\"\n              onClick={() => logoutAction()}\n            >\n              Logout\n            </Typography>\n          </Box>\n        </Toolbar>\n      </AppBar>\n    </Fragment>\n  );\n};\n\nconst PresentationListItems = (props) => {\n  return (\n    <div style={{ display: \"flex\" }}>\n      {props.menuItemTitles.map((title) => (\n        <ListItem\n          button\n          style={{\n            color: props.selectedItem === title ? \"blue\" : \"inherit\",\n            width: \"fit-content\",\n          }}\n          onClick={() => props.onClick(title)}\n          key={title}\n        >\n          <ListItemText primary={title} key={title} />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nconst findSelectedComponent = (selectedItem, user) => {\n  const component = [...presentationComponents()].filter(\n    (comp) => comp.title === selectedItem\n  );\n  if (component.length === 1) return component[0];\n\n  console.log(\n    \"In findSelectedComponent of MakeEligible. Didn't find the component that corresponds to the menu item.\"\n  );\n  return {\n    title: null,\n    component: null,\n  };\n};\n\nexport default function MainDraswer({ title, user, logoutAction, account_id}) {\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(true);\n  const [selectedItem, setSelectedItem] = useState(\"Home\");\n\n  console.log(\"in MainDrawer\");\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleSelectedItem = (title) => {\n    setSelectedItem(title);\n  };\n  console.log(\"user in main drawer\");\n  console.log(account_id);\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n      <TopBar\n        selectedItem={selectedItem}\n        handleSelectedItem={handleSelectedItem}\n        open={open}\n        logoutAction={logoutAction}\n      />\n      {\n      // Allow each link to display components\n      }\n      <Main user={user} account_id={account_id} open={open}>\n        <DrawerHeader />\n        {findSelectedComponent(selectedItem, user).component}\n      </Main>\n    </Box>\n  );\n}\n","import { Fragment } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport MainDrawer from \"./menu/MainDrawer\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#fefefe\",\n    },\n  },\n  // Used for fonts\n  typography: {},\n});\n\nconst makeUserName = ({ email, userName }) => {\n  return `${email} ${userName}`;\n};\n\nconst makeAccount = ({account_id}) => {\n  return `${account_id}`;\n};\n\nexport default function App({ user, logoutAction }) {\n  const mainPageTitle = \"WoW-Teamz\";\n\n  return (\n    <ThemeProvider theme={theme}>\n      <MainDrawer\n        title={mainPageTitle}\n        user={makeUserName(user)}\n        logoutAction={logoutAction}\n        account_id={makeAccount(user)}\n      />\n    </ThemeProvider>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"./API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setSignupMode, setUser}) {\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [userCheck, setUserCheck] = useState(false);\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Signup Called');\r\n    setUserCheck(true);\r\n    console.log(email);\r\n  };\r\n\r\n  const handleSignin = () => {\r\n    console.log('Signin called');\r\n    setSignupMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR USER\r\n\r\n  useEffect(() => {\r\n    if (email.length === 0) return;\r\n    const api = new API();\r\n    async function checkUserEmail() {\r\n        api.checkUserEmail(email)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkUserEmail();\r\n  }, [userCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (email.length === 0 || userName.length === 0 || password.length === 0) return;\r\n    const api = new API();\r\n    async function insertNewUser() {\r\n        api.insertNewUser(userName, email, password)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        const user = newUserInfo.data.user;\r\n        console.log(\"BELOW IS USER\");\r\n        console.log(user);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Signup Sucessful, Thank you for signing up!\");\r\n          setUser(user);\r\n          setSignupMode(false);\r\n        } else {\r\n          alert(\"Signup Not Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    insertNewUser();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"userName\"\r\n                  label=\"User Name\"\r\n                  name=\"userName\"\r\n                  value={userName}\r\n                  onChange={(u) => setUserName(u.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"new-password\"\r\n                  value={password}\r\n                  onChange={(p) => setPassword(p.target.value)}\r\n                />\r\n              </Grid>\r\n              \r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleSignin} >\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, { Fragment, useState } from 'react';\nimport Login from './Login';\nimport App from './App';\nimport Signup from './Signup';\n\nexport default function Main({account_id}) {\n    const [user, setUser] = useState(undefined);\n    const [signupMode, setSignupMode] = useState(false);\n\n    const logout = (setUser) => {\n        return () => {\n            setUser(undefined);\n        }\n    };\n    console.log(\"in Main:\");\n    console.log(account_id);\n    \n\n    return (\n        <Fragment>\n            {\n                user !== undefined ? (\n                    <App user={user} logoutAction={logout(setUser)} account_id={account_id}/>\n                ) : (\n                    signupMode ? (\n                        <Signup user={user} setUser={setUser} setSignupMode={setSignupMode}/>\n                    ) : (\n                        <Login user={user} setUser={setUser} setSignupMode={setSignupMode} />\n                    )\n                )\n            }\n        </Fragment>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}