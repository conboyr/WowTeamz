{"version":3,"sources":["API_Interface/API_Interface.js","Login.js","Components/Accounts/Accounts.js","Components/Characters/RoleSelectionComponent.js","Components/Characters/Characters.js","Components/RaidTeams/MakeRaidTeam.js","Components/RaidTeams/CharsForRaidTeam.js","Components/RaidTeams/AddCharToTeam.js","Components/RaidTeams/OneRaidTeam.js","Components/RaidTeams/RaidTeams.js","Components/SummaryPage/Summary.js","menu/MenuPresentationComponents.js","menu/MainDrawer.js","App.js","Signup.js","Main.js","reportWebVitals.js","index.js"],"names":["axiosAgent","axios","defaults","headers","common","baseURL","withCredentials","APIInterface","getUserInfo","email","password","console","log","JSON","stringify","post","checkUserEmail","get","concat","insertNewUser","userName","insertCharacter","raidTeam_id","then","response","data","catch","error","character","undefined","allCharacters","deleteCharacter","characterName","delete","encodeURIComponent","insertNotes","notes","insertRole","role","allAccounts","accountWithEmail","allRaidTeams","checkRaidName","teamName","createRaidTeam","numPlayers","raidDay_A","raidDay_B","raidTime","addPlayerToRaid","character_id","charsForRaidTeam","removeChar","patch","deleteRaid","defaultTheme","createTheme","Login","_ref","setUser","setSignupMode","setEmail","useState","setPassword","authFailed","setAuthFailed","verifyUser","setVerifyUser","useEffect","api","API","async","userInfo","user","status","_jsx","ThemeProvider","theme","children","_jsxs","Grid","container","component","sx","height","CssBaseline","item","xs","sm","md","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","Paper","elevation","square","Box","my","mx","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","noValidate","mt","TextField","label","fullWidth","value","onChange","e","target","margin","helperText","type","p","FormControlLabel","control","Checkbox","color","Button","mb","onClick","handleLogin","length","marginLeft","handleSignup","accountsTableAttributes","title","attributeDBName","align","NameInputComponent","userInput","setUserInput","accounts","setAccounts","accountsJSONString","getAccounts","TRow","accountObject","TableRow","border","map","attr","idx","TableCell","Fragment","TableContainer","Table","minWidth","TableHead","TableBody","account","roleImages","Tank","Healer","DPS","RoleSelectionComponent","handleUpdateRole","selectedRole","setSelectedRole","Select","newRole","event","name","displayEmpty","renderValue","src","alt","style","width","MenuItem","disabled","Object","entries","_ref2","image","characterTableAttributes","raidBuffRequirements","Paladin","Druid","DemonHunter","Monk","Priest","Mage","Evoker","Hunter","Warrior","Rogue","Warlock","classColorMap","DeathKnight","Shaman","raidID","isEditing","setIsEditing","setName","characters","setCharacters","editIdx","setEditIdx","editedText","setEditedText","expandedId","setExpandedId","characterCount","setCharacterCount","missingBuffs","setMissingBuffs","isMinimalView","setIsMinimalView","standardizeClassName","className","replace","warn","sortedCharacters","sort","a","b","roleOrder","fetchCharacters","intervalId","setInterval","clearInterval","every","char","class","buffs","classCounts","keys","forEach","requiredClass","hasOwnProperty","requiredCount","countShort","push","calculateMissingBuffs","cancelEdit","position","buff","index","prev","top","right","borderColor","filter","includes","React","backgroundColor","IconButton","ExpandLessIcon","ExpandMoreIcon","detail","handleEdit","MoreVertIcon","encodedName","Error","handleDelete","size","updatedCharacter","i","saveEdit","colSpan","whiteSpace","onKeyPress","key","characterData","handleAddName","fontSize","AddIcon","SignUp","setMakeRaidMode","setTeamName","setNumPlayers","setRaidDayA","setRaidDayB","setRaidTime","exist","setExist","raidCheck","setRaidCheck","newUserInfo","alert","Container","maxWidth","marginTop","spacing","required","id","n","FormControl","InputLabel","FormHelperText","t","handleSubmit","justifyContent","Link","handleGoBack","raidteamsTableAttributes","CharacterTable","setAddCharMode","setOneRaidMode","setRaid","setChars","raidteams","setRaidTeams","openRows","setOpenRows","buttonClicked","setButtonClicked","setRaidTeam_id","deleteMode","setDeleteMode","removeMode","setRemoveMode","setCharacter_id","raidTeamName","setRaidTeamName","highlightMode","setHighlightMode","hoveredIdx","setHoveredIdx","hoveredCIdx","setCHoveredIdx","reloadTable","setReloadTable","raidteamsJSONString","getRaidTeams","charactersJSONString","Array","fill","handleMouseLeave","handleCMouseLeave","ml","team","onMouseEnter","onMouseLeave","newOpenRows","handleRowToggle","handleButtonClick","KeyboardArrowUpIcon","KeyboardArrowDownIcon","handleRaidClick","raid","raidteam","stopPropagation","isArray","handleRemove","OneRaidTeam","chars","addCharMode","viewCharacters","setViewCharacters","roleCount","Divider","BarChart","series","gearScore","xAxis","scaleType","tickLabelAngle","tickLabelProps","textAnchor","dy","bottom","left","PieChart","Character","RaidTeams","makeRaidMode","oneRaidMode","MakeRaidTeam","AddCharToTeam","CharsForRaidTeam","Summary","props","presentationComponents","Accounts","Characters","Main","styled","flexGrow","padding","AppBar","MuiAppBar","shouldForwardProp","prop","transition","transitions","create","easing","sharp","duration","leavingScreen","DrawerHeader","_ref3","mixins","toolbar","TopBar","_ref4","open","selectedItem","handleSelectedItem","logoutAction","Toolbar","List","PresentationListItems","menuItemTitles","comp","flex","noWrap","ListItem","button","ListItemText","primary","findSelectedComponent","MainDraswer","_ref5","useTheme","setOpen","setSelectedItem","palette","main","typography","makeUserName","App","MainDrawer","setUserName","userCheck","setUserCheck","u","autoComplete","handleSignin","signupMode","logout","Signup","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a59f794d.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst AxiosConfigured = () => {\n    // Indicate to the API that all requests for this app are AJAX\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n    // Set the baseURL for all requests to the API domain instead of the current domain\n    // axios.defaults.baseURL = `http://localhost:8443/api/v1`;\n    axios.defaults.baseURL = `http://localhost:8443/api/v1`;\n\n\n    // Allow the browser to send cookies to the API domain (which include auth_token)\n    axios.defaults.withCredentials = true;\n\n\n//    axios.defaults.headers.common['X-CSRF-TOKEN'] = csrf_token;\n\n    return axios;\n};\n\n\nconst axiosAgent = AxiosConfigured();\n\nexport default class APIInterface {\n\n    //Login\n\n    async getUserInfo(email, password) {\n        console.log(JSON.stringify(email));\n        console.log(JSON.stringify(password));\n        return axiosAgent.post(`/login/`, {email, password});\n    }\n\n    //Signup\n\n    async checkUserEmail(email) {\n        return axiosAgent.get(`/signup/${email}`);\n    }\n\n    async insertNewUser(userName, email, password) {\n        console.log(JSON.stringify(email));\n        console.log(JSON.stringify(password));\n        return axiosAgent.post(`/signup/`, {email, password, userName});\n    }\n\n    //Characters\n\n    async insertCharacter(userName, raidTeam_id) {\n        return axiosAgent.post(`/characters/insert/`, { userName, raidTeam_id })\n            .then(response => response.data)\n            .catch(error => ({\n                error,\n                character: undefined\n            }));\n    }\n    async allCharacters(raidTeam_id) {\n        return axiosAgent.get(`characters/all-characters/${raidTeam_id}`);\n\n    }\n\n    async deleteCharacter(characterName) {\n        return axios.delete(`/characters/delete/${encodeURIComponent(characterName)}`);\n    }\n    \n    async insertNotes(characterName, notes) {\n        return axios.post(`/characters/insert-notes/${encodeURIComponent(characterName)}`, { notes });\n    }\n    async insertRole(characterName, raidTeam_id, role) {\n        return axios.post(`/characters/insert-role/${encodeURIComponent(characterName)}/${raidTeam_id}`, { role })  // Ensure correct URL and data\n            .then(response => response.data)\n            .catch(error => ({\n                error,\n            }));\n    }\n\n    //Accounts\n\n    async allAccounts() {\n        return axiosAgent.get(`accounts/all-accounts`);\n    }\n\n    async accountWithEmail(email) {\n        return axiosAgent.get(`accounts/${email}`);\n    }\n\n\n    //Raid Teams\n\n    async allRaidTeams() {\n        return axiosAgent.get(`raidteams/all-raidteams`);\n    }\n\n    async checkRaidName(teamName) {\n        return axiosAgent.get(`/raidteams/${teamName}`);\n    }\n\n    async createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime) {\n        return axiosAgent.post(`/raidteams/`, {teamName, numPlayers, raidDay_A, raidDay_B, raidTime});\n    }\n\n    async addPlayerToRaid(raidTeam_id, character_id) {\n        return axiosAgent.get(`raidteams/${raidTeam_id}/${character_id}`);\n    }\n\n    async charsForRaidTeam(raidTeam_id) {\n        return axiosAgent.get(`/raidteams/${raidTeam_id}/chars-for-raidteam`);\n    }\n\n    async removeChar(character_id) {\n        return axios.patch(`/raidteams/remove/${character_id}`);\n    }\n\n    async deleteRaid(raidTeam_id) {\n        return axios.delete(`/raidteams/delete/${raidTeam_id}`);\n    }\n\n}","import React, { useState, useEffect } from \"react\";\nimport API from \"./API_Interface/API_Interface\";\nimport {\n  Avatar, Box, Button, Checkbox, CssBaseline, Divider, FormControlLabel,\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\n} from \"@mui/material\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\n\nconst defaultTheme = createTheme();\n\nexport default function Login({ setUser, setSignupMode}) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [authFailed, setAuthFailed] = useState(false);\n  const [verifyUser, setVerifyUser] = useState(false);\n  //const [newUser, setNewUser] = useState(false);\n \n  const handleLogin = () => {\n    console.log(\"handleLogin called.\");\n    if (email.length === 0 || password.length === 0) {\n      setAuthFailed(true);\n    } else {\n      setAuthFailed(false);\n      setVerifyUser(true);  // Move user verification flag here\n    }\n  };\n\n  const handleSignup = () => {\n    console.log(\"handleSignup called.\");\n    setSignupMode(true); // Toggle signup mode to true\n  };\n\n\n  useEffect(() => {\n    if (!verifyUser) return;\n\n    const api = new API();\n    async function getUserInfo() {\n        api.getUserInfo(email, password)\n        .then( userInfo => {\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo)}`);\n        const user = userInfo.data.user;\n        console.log(\"BELOW IS USER\");\n        console.log(user);\n        if (userInfo.data.status === \"OK\") {\n          console.log(\"SETTING USER to USER\");\n          setUser(user);\n        } else {\n          setVerifyUser(false);\n          setAuthFailed(true);\n        }\n      });\n    }\n    getUserInfo();\n  }, [verifyUser, email, password, setUser]); // Ensure dependencies are correctly listed\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Grid container component=\"main\" sx={{ height: \"100vh\" }}>\n        <CssBaseline />\n        <Grid item xs={false} sm={4} md={7} sx={{\n          backgroundImage: \"url(https://wallpapers.com/images/hd/world-of-warcraft-restoration-druid-healing-69ucodb01a3oyfab.webp)\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n        }} />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box sx={{ \n            my: 8, mx: 4, display: \"flex\", flexDirection: \"column\", alignItems: \"center\"\n          }}>\n            <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Sign in\n            </Typography>\n            <Box component=\"form\" noValidate sx={{ mt: 1}}>\n              <TextField\n                error={authFailed}\n                label=\"Email\"\n                fullWidth\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                margin=\"normal\"\n                helperText={authFailed ? \"Invalid email or password\" : \"\"}\n              />\n              <TextField\n                error={authFailed}\n                label=\"Password\"\n                type=\"password\"\n                fullWidth\n                value={password}\n                onChange={(p) => setPassword(p.target.value)}\n                margin=\"normal\"\n                helperText={authFailed ? \"Invalid email or password\" : \"\"}\n              />\n              <FormControlLabel\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                label=\"Remember me\"\n              />\n              <Button\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n                onClick={handleLogin}\n              >\n                Sign In\n              </Button>\n              \n                \n                <Button\n                  variant=\"contained\"\n                  sx={{ mt: 3, mb: 2, marginLeft: 1 }} // Added marginLeft to create space between the Typography and Button\n                  onClick={handleSignup}\n                >\n                  Sign up here\n                </Button>\n              \n\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n}\n","import React, {useState, useEffect, Fragment} from 'react';\r\nimport API from '../../API_Interface/API_Interface'\r\n\r\n\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\n//import TextField from '@mui/material/TextField';\r\n//import Button from '@mui/material/Button';\r\n//import Box from '@mui/material/Box';\r\n//import Divider from '@mui/material/Divider';\r\n//import Avatar from '@mui/material/Avatar';\r\n//import CssBaseline from '@mui/material/CssBaseline';\r\n//import FormControlLabel from '@mui/material/FormControlLabel';\r\n//import Checkbox from '@mui/material/Checkbox';\r\n//import Link from '@mui/material/Link';\r\n//import Grid from '@mui/material/Grid';\r\n//import LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\n//import { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\n\r\n\r\nconst accountsTableAttributes = [\r\n    {\r\n        title: 'Email',\r\n        attributeDBName: 'email',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'User Name',\r\n        attributeDBName: 'userName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Account ID',\r\n        attributeDBName: 'account_id',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Role',\r\n        attributeDBName: 'role',\r\n        align: 'left'\r\n    },\r\n]; \r\n\r\nexport default function NameInputComponent() {\r\n\r\n//START display of characters in database\r\n\r\n    const [userInput, setUserInput] = useState('');\r\n    const [verifyUser, setVerifyUser] = useState(false);\r\n    const [authFailed, setAuthFailed] = useState(false);\r\n    const [user, setUser] = useState(undefined);\r\n\r\n    const handleInputChange = event => {\r\n        console.log(\"handleInputChange called.\");\r\n\r\n        setUserInput(event.target.value);\r\n        setAuthFailed(false);\r\n\r\n        if(event.key === \"Sign In\") {\r\n            console.log(\"handleKeyPress: Verify user input.\");\r\n            setVerifyUser(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n \r\n        if( ! verifyUser || userInput.length === 0)\r\n            return;\r\n\r\n        const api = new API();\r\n        async function getUserInfo() {\r\n            api.getUserInfo(userInput)\r\n                .then( userInfo => {\r\n                console.log(`api returns user info and it is: ${JSON.stringify(userInfo)}`);\r\n                const user = userInfo.user;\r\n                if( userInfo.status === \"OK\" ) {\r\n                    setUser(user);\r\n                } else  {\r\n                    setVerifyUser(false);\r\n                    setAuthFailed(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        getUserInfo();\r\n    }, [verifyUser, setUser, userInput]);\r\n\r\n    const [accounts, setAccounts] = useState([]);\r\n    console.log(`in AccountTable accounts contains is ${JSON.stringify(accounts)}`);\r\n\r\n\r\n    useEffect(() => {\r\n        const api = new API();\r\n\r\n        async function getAccounts() {\r\n            const accountsJSONString = await api.allAccounts();\r\n            console.log(`accounts from the DB ${JSON.stringify(accountsJSONString)}`);\r\n            setAccounts(accountsJSONString.data);\r\n        }\r\n\r\n        getAccounts();\r\n    }, []);\r\n    \r\n    const TRow = ({accountObject, onClick}) => {\r\n        return <TableRow\r\n            sx={{'&:last-child td, &:last-child th': {border: 0}}}\r\n        >\r\n            {\r\n                accountsTableAttributes.map((attr, idx) =>\r\n                    <TableCell key={idx} onClick={() => onClick(accountObject)}\r\n                               align={attr.align}>\r\n                        {\r\n                            accountObject[attr.attributeDBName]\r\n                        }\r\n                    </TableCell>)\r\n            }\r\n        </TableRow>\r\n    }\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n            Here is a list of all your characters that reside in your account.\r\n            </Typography> \r\n        {\r\n            accounts.length > 0 &&\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{minWidth: 650}} aria-label=\"account table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {\r\n                                    accountsTableAttributes.map((attr, idx) =>\r\n                                        <TableCell  key={idx}\r\n                                                    align={attr.align}>\r\n                                            {attr.title}\r\n                                        </TableCell>)\r\n                                }\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                accounts.map((account, idx) => (\r\n                                    <TRow accountObject={account} key={idx}/>\r\n                                ))\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n        }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import { Select, MenuItem } from '@mui/material';\r\nimport { useState } from 'react';\r\nconst roleImages = {\r\n    Tank: \"https://cdn.raiderio.net/assets/img/role_tank-6cee7610058306ba277e82c392987134.png\",\r\n    Healer: \"https://cdn.raiderio.net/assets/img/role_healer-984e5e9867d6508a714a9c878d87441b.png\",\r\n    DPS: \"https://cdn.raiderio.net/assets/img/role_dps-eb25989187d4d3ac866d609dc009f090.png\",\r\n};\r\nfunction RoleSelectionComponent({ character, handleUpdateRole }) {\r\n    const [selectedRole, setSelectedRole] = useState(character.role || '');\r\n\r\n    const handleChange = async (event) => {\r\n        const newRole = event.target.value;\r\n        setSelectedRole(newRole);  // Update the local state\r\n\r\n        try {\r\n            // Call the function to update the role\r\n            await handleUpdateRole(character.name, newRole, character.raidTeam_id);  // Ensure handleUpdateRole is passed and defined\r\n        } catch (error) {\r\n            console.error(\"Error updating role:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Select\r\n            value={selectedRole}\r\n            onChange={handleChange}\r\n            displayEmpty\r\n            renderValue={(value) => (\r\n                value ? (\r\n                    <img\r\n                        src={roleImages[value]}\r\n                        alt={`${value} role icon`}  // Alt text for accessibility\r\n                        style={{ width: '24px', height: '24px' }}  // Adjust size as needed\r\n                    />\r\n                ) : \"Select Role\"\r\n            )}\r\n        >\r\n            <MenuItem value=\"\" disabled>\r\n                Select Role\r\n            </MenuItem>  // Default \"Select Role\" option\r\n            {Object.entries(roleImages).map(([role, image]) => (\r\n                <MenuItem key={role} value={role}>\r\n                    <img\r\n                        src={image}\r\n                        alt={`${role} icon`}  // Alt text for accessibility\r\n                        style={{ width: '24px', height: '24px' }}  // Adjust size as needed\r\n                    />\r\n                </MenuItem>\r\n            ))}\r\n        </Select>\r\n    );\r\n}\r\n\r\nexport default RoleSelectionComponent;","import React, { useState, useEffect } from 'react';\r\nimport API from '../../API_Interface/API_Interface'; // Ensure this path is correct\r\nimport { Box, TextField, IconButton, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\nimport RoleSelectionComponent from './RoleSelectionComponent'\r\nconst characterTableAttributes = [\r\n    {\r\n        title: 'Image',\r\n        attributeDBName: 'imagePath',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Role',\r\n        attributeDBName: 'role',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Name',\r\n        attributeDBName: 'name',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Race',\r\n        attributeDBName: 'race',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Class',\r\n        attributeDBName: 'class',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Item Level',\r\n        attributeDBName: 'gearScore',\r\n        align: 'left'\r\n    },\r\n];\r\nconst raidBuffRequirements = {\r\n    Paladin: 2,\r\n    Druid: 1,\r\n    DemonHunter: 1,\r\n    Monk: 1,\r\n    Priest: 1,\r\n    Mage: 1,\r\n    Evoker: 1,\r\n    Hunter: 1,\r\n    Warrior: 1,\r\n    Rogue: 1,\r\n    Warlock: 1,\r\n};\r\nconst classColorMap = {\r\n    DeathKnight: '#dca3a3', // Soft Dark Red\r\n    Paladin: '#f4a7b1', // Soft Pink\r\n    Druid: '#f5c78e', // Soft Orange\r\n    Warrior: '#c0c0c0', // Light Gray\r\n    Mage: '#add8e6', // Light Blue\r\n    Hunter:'#9acd32' , // Light Green'#9acd32'\r\n    Rogue: '#f0e68c', // Khaki\r\n    Priest: '#f5f5f5', // Off White\r\n    Shaman: '#b0e0e6', // Powder Blue\r\n    Warlock: '#d8bfd8', // Thistle\r\n    Monk: '#98fb98', // Yellow Green\r\n    DemonHunter: '#d8bfd8', // Light Purple\r\n    Evoker: '#afeeee', // Pale Turquoise\r\n};\r\nfunction NameInputComponent({ raidID }) {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [characters, setCharacters] = useState([]);\r\n    const [editIdx, setEditIdx] = useState(null);\r\n    const [editedText, setEditedText] = useState('');\r\n    const api = new API();\r\n    const [expandedId, setExpandedId] = useState(null);\r\n    const [characterCount, setCharacterCount] = useState(0);\r\n    const [missingBuffs, setMissingBuffs] = useState([]);\r\n    const [isMinimalView, setIsMinimalView] = useState(false);\r\n\r\n    console.log(raidID);\r\n\r\n    function standardizeClassName(className) {\r\n        if (!className) {\r\n            console.warn(\"Encountered undefined className, defaulting to empty string.\");\r\n            return '';  // Return a default or handle it as you see fit\r\n        }\r\n        return className.replace(/\\s+/g, '');\r\n\r\n    }\r\n    const sortedCharacters = characters.sort((a, b) => {\r\n        const roleOrder = {\r\n            Tank: 1,\r\n            Healer: 2,\r\n            DPS: 3,\r\n            undefined: 4,\r\n        };\r\n        return (roleOrder[a.role] || 4) - (roleOrder[b.role] || 4);\r\n    });\r\n    function calculateMissingBuffs(characters) {\r\n        const classCounts = {};\r\n\r\n\r\n        Object.keys(raidBuffRequirements).forEach(requiredClass => {\r\n            classCounts[requiredClass] = 0;\r\n        });\r\n\r\n\r\n        characters.forEach(character => {\r\n            const className = standardizeClassName(character.class); // Ensure this is the correct property for class\r\n            if (classCounts.hasOwnProperty(className)) {\r\n                classCounts[className]++;\r\n            }\r\n        });\r\n\r\n\r\n        const missingBuffs = [];\r\n        Object.entries(raidBuffRequirements).forEach(([className, requiredCount]) => {\r\n            const countShort = requiredCount - classCounts[className];\r\n            if (countShort > 0) {\r\n                missingBuffs.push(`Missing ${countShort} ${className}${countShort > 1 ? 's' : ''}`);\r\n            }\r\n        });\r\n\r\n        return missingBuffs;\r\n    }\r\n\r\n//useEffect for all characters\r\n    useEffect(() => {\r\n        const fetchCharacters = async () => {\r\n            const response = await api.allCharacters(raidID);\r\n            console.log(response);\r\n            if (response.data) {\r\n                setCharacters(response.data);\r\n                console.log(response.data);\r\n                setCharacterCount(response.data.length);\r\n            }\r\n        };\r\n\r\n        fetchCharacters();  // Initial fetch\r\n        const intervalId = setInterval(fetchCharacters, 5000);  // Fetch every 5000 ms (5 seconds)\r\n\r\n        return () => clearInterval(intervalId);  // Clear interval on component unmount\r\n    }, [raidID]);\r\n\r\n    useEffect(() => {\r\n        if (characters.length > 0 && characters.every(char => char.class !== undefined)) {\r\n            const buffs = calculateMissingBuffs(characters);\r\n            setMissingBuffs(buffs);\r\n        } else {\r\n            console.log(\"Waiting for characters data to be fully loaded or verified...\");\r\n        }\r\n    }, [characters]);\r\n    const handleAddName = async () => {\r\n        if (name) {\r\n            try {\r\n                const characterData = await api.insertCharacter(name, raidID);\r\n                console.log(characterData);\r\n                if (characterData.error) {\r\n                    throw characterData.error;\r\n                }\r\n                setCharacters([...characters, characterData]);\r\n                setCharacterCount(prev => prev + 1);\r\n                setName('');\r\n                setIsEditing(false);\r\n            } catch (error) {\r\n                console.error('API call failed:', error);\r\n            }\r\n        }\r\n    };\r\n    const handleDelete = async (characterName) => {\r\n        try {\r\n            const encodedName = characterName;\r\n            const response = await api.deleteCharacter(encodedName);\r\n            if (response.status === 200) {\r\n                setCharacters(characters.filter(char => char.name !== characterName));\r\n                setCharacterCount(prev => prev - 1);\r\n            } else {\r\n                throw new Error('Failed to delete character');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting character:', error);\r\n            // Optionally, show an error message to the user\r\n        }\r\n    };\r\n    const handleEdit = (index) => {\r\n        setEditIdx(index);\r\n        setEditedText(characters[index].detail || '');  // Assuming 'detail' is what you want to edit\r\n    };\r\n    const saveEdit = async (index) => {\r\n        const character = characters[index];\r\n        const characterName = character.name;  // Assuming character name is stored under 'name'\r\n        const notes = editedText;  // The text currently in the editable TextField\r\n\r\n        try {\r\n            // Calling the API to update the notes in the backend\r\n            const response = await api.insertNotes(characterName, notes);\r\n            if (response.status === 200) {\r\n                // Update the local state to reflect the changes\r\n                const updatedCharacter = {...character, detail: notes};\r\n                setCharacters(characters.map((char, i) => i === index ? updatedCharacter : char));\r\n                setEditIdx(null);\r\n                setEditedText('');\r\n            } else {\r\n                // Handle possible errors here, you might want to inform the user\r\n                throw new Error('Failed to update notes');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating notes:', error);\r\n            // Optionally, display an error message to the user\r\n        }\r\n    };\r\n\r\n    const cancelEdit = () => {\r\n        setEditIdx(null);\r\n        setEditedText('');\r\n    };\r\n    const handleUpdateRole = async (characterName, newRole, raidTeam_id) => {\r\n        try {\r\n            await api.insertRole(characterName, raidTeam_id, newRole);  // Pass role, characterName, raidTeam_id\r\n        } catch (error) {\r\n            console.error('Failed to update role:', error);\r\n        }\r\n    };\r\n    return (\r\n        <Box position=\"relative\">\r\n            <Typography variant=\"h4\" sx={{mb: 2}}>\r\n                Characters\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\" sx={{mb: 2}}>\r\n                Character Count: {characterCount}/20\r\n            </Typography>\r\n\r\n            {missingBuffs.length > 0 && (\r\n                <Box sx={{mb: 2}}>\r\n                    {missingBuffs.map((buff, index) => (\r\n                        <Typography key={index} color=\"error\">\r\n                            {buff}\r\n                        </Typography>\r\n                    ))}\r\n                </Box>\r\n            )}\r\n\r\n            <Button\r\n                variant=\"outlined\"\r\n                onClick={() => setIsMinimalView((prev) => !prev)}\r\n                sx={{\r\n                    position: 'absolute',\r\n                    top: 10,\r\n                    right: 10,\r\n                    borderColor: 'black',\r\n                    color: 'black',\r\n                }}\r\n            >\r\n                {isMinimalView ? 'Expanded View' : 'Minimal View'}\r\n            </Button>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{minWidth: 650}} aria-label=\"characters table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {characterTableAttributes\r\n                                .filter(\r\n                                    (attr) => !isMinimalView || ['Role', 'Name', 'Class'].includes(attr.title)\r\n                                ) // Only display \"Role,\" \"Name,\" \"Class\" in Minimal View\r\n                                .map((attr) => (\r\n                                    <TableCell key={attr.title} align={attr.align}>\r\n                                        {attr.title}\r\n                                    </TableCell>\r\n                                ))}\r\n                            {!isMinimalView && (\r\n                                <TableCell align=\"center\">Actions</TableCell>  // Display \"Actions\" in Expanded View\r\n                            )}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {sortedCharacters.map((character, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <TableRow\r\n                                    key={index}\r\n                                    sx={{\r\n                                        backgroundColor:\r\n                                            classColorMap[standardizeClassName(character.class)] || '#FFFFFF',\r\n                                    }}\r\n                                >\r\n                                    {characterTableAttributes\r\n                                        .filter(\r\n                                            (attr) => !isMinimalView || ['Role', 'Name', 'Class'].includes(attr.title)\r\n                                        )\r\n                                        .map((attr) => (\r\n                                            <TableCell key={attr.title} align={attr.align}>\r\n                                                {attr.attributeDBName === 'imagePath' && !isMinimalView ? (\r\n                                                    <img\r\n                                                        src={character[attr.attributeDBName]}\r\n                                                        alt={`Avatar of ${character.name}`}\r\n                                                        style={{width: '70px', height: '70px'}}\r\n                                                    />\r\n                                                ) : attr.attributeDBName === 'role' ? (\r\n                                                    <RoleSelectionComponent\r\n                                                        character={character}\r\n                                                        handleUpdateRole={handleUpdateRole}  // Role selection\r\n                                                    />\r\n                                                ) : (\r\n                                                    character[attr.attributeDBName]  // Display other values\r\n                                                )}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                    {!isMinimalView && (\r\n                                        <TableCell align=\"center\">\r\n                                            <IconButton\r\n                                                onClick={() => setExpandedId(expandedId === index ? null : index)}>\r\n                                                {expandedId === index ? <ExpandLessIcon/> : <ExpandMoreIcon/>}\r\n                                            </IconButton>\r\n                                            <IconButton onClick={() => handleEdit(index)}>\r\n                                                <MoreVertIcon/>\r\n                                            </IconButton>\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                color=\"error\"\r\n                                                onClick={() => handleDelete(character.name)}\r\n                                            >\r\n                                                Delete\r\n                                            </Button>\r\n                                            {editIdx === index && (\r\n                                                <Box>\r\n                                                    <TextField\r\n                                                        value={editedText}\r\n                                                        onChange={(e) => setEditedText(e.target.value)}\r\n                                                        size=\"small\"\r\n                                                    />\r\n                                                    <Button onClick={() => saveEdit(index)}>Save</Button>\r\n                                                    <Button onClick={cancelEdit}>Cancel\r\n                                                    </Button>\r\n                                                </Box>\r\n                                            )}\r\n                                        </TableCell>\r\n                                    )}\r\n                                </TableRow>\r\n                                {expandedId === index && (\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={characterTableAttributes.length + 1}>\r\n                                            <Typography variant=\"body2\" style={{whiteSpace: 'pre-wrap'}}>\r\n                                                {character.notes || 'No notes available'}\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )}\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {isEditing && (\r\n                <TextField\r\n                    label=\"Enter Character Name\"\r\n                    variant=\"outlined\"\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    onKeyPress={(e) => e.key === 'Enter' && handleAddName()}\r\n                    fullWidth\r\n                    sx={{\r\n                        borderColor: 'black',\r\n                        color: 'black',\r\n                        '& .MuiOutlinedInput-root': {\r\n                            '& fieldset': {\r\n                                borderColor: 'black',\r\n                            },\r\n                            '&:hover fieldset': {\r\n                                borderColor: 'black',\r\n                            },\r\n                            '&.Mui-focused fieldset': {\r\n                                borderColor: 'black',\r\n                            },\r\n                        },\r\n                    }}\r\n                />\r\n            )}\r\n            <IconButton\r\n                onClick={() => setIsEditing(true)}\r\n                aria-label=\"add character\"\r\n                size=\"large\"\r\n                sx={{fontSize: '3rem', mt: 2}}\r\n            >\r\n                <AddIcon sx={{fontSize: 'inherit'}}/>\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n}\r\nexport default NameInputComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, InputLabel, MenuItem, FormHelperText, FormControl, Select, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setMakeRaidMode}) {\r\n  const [teamName, setTeamName] = useState(\"\");\r\n  const [numPlayers, setNumPlayers] = useState(\"\");\r\n  const [raidDay_A, setRaidDayA] = useState(\"\");\r\n  const [raidDay_B, setRaidDayB] = useState(\"\");\r\n  const [raidTime, setRaidTime] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [raidCheck, setRaidCheck] = useState(false);\r\n\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Raid Team Called');\r\n    setRaidCheck(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    console.log('Raid Mode called');\r\n    setMakeRaidMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR RAID\r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0) return;\r\n    const api = new API();\r\n    async function checkRaidName() {\r\n        api.checkRaidName(teamName)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkRaidName();\r\n  }, [raidCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0 || numPlayers.length === 0 || raidTime.length === 0) return;\r\n    const api = new API();\r\n    async function createRaidTeam() {\r\n        api.createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Raid Team Created!\");\r\n          setMakeRaidMode(false);\r\n        } else {\r\n          alert(\"Creation NOT Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    createRaidTeam();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Create Raid Team\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"teamName\"\r\n                  label=\"Team Name\"\r\n                  name=\"teamName\"\r\n                  value={teamName}\r\n                  onChange={(n) => setTeamName(n.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"numPlayers\"\r\n                  label=\"Raid Team Size\"\r\n                  name=\"numPlayers\"\r\n                  value={numPlayers}\r\n                  onChange={(p) => setNumPlayers(p.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd1\">Raid Day 1</InputLabel>\r\n                    <Select\r\n                    id=\"rd1\"\r\n                    value={raidDay_A}\r\n                    label=\"Raid Day 1\"\r\n                    onChange={(a) => setRaidDayA(a.target.value)}\r\n                    >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                    <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                    <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                    <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                    <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                    <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                    <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd2\">Raid Day 2</InputLabel>\r\n                        <Select\r\n                        id=\"rd2\"\r\n                        value={raidDay_B}\r\n                        label=\"Raid Day 2\"\r\n                        onChange={(b) => setRaidDayB(b.target.value)}\r\n                        >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n                        <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                        <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                        <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                        <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                        <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                        <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                        <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                        </Select>\r\n                    <FormHelperText>Select 'None' if only 1 raid day</FormHelperText>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"raidTime\"\r\n                  label=\"Time of Raid\"\r\n                  name=\"raidTime\"\r\n                  value={raidTime}\r\n                  onChange={(t) => setRaidTime(t.target.value)}\r\n                />\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Raid Team\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleGoBack} >\r\n                  Already have a Raid Team? Go back\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, {useState, useEffect, Fragment} from 'react';\r\nimport API from '../../API_Interface/API_Interface'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport Box from '@mui/material/Box';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nconst raidteamsTableAttributes = [\r\n    {\r\n        title: 'Raid ID',\r\n        attributeDBName: 'raidTeam_id',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Team Name',\r\n        attributeDBName: 'teamName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Size',\r\n        attributeDBName: 'numPlayers',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Day 1',\r\n        attributeDBName: 'raidDay_A',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Day 2',\r\n        attributeDBName: 'raidDay_B',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Time (PST)',\r\n        attributeDBName: 'raidTime',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Players on Bench',\r\n        attributeDBName: 'numBench',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Trials',\r\n        attributeDBName: 'numTrial',\r\n        align: 'left'\r\n    },\r\n]; \r\n\r\nconst characterTableAttributes = [\r\n    {\r\n        title: 'Team Name',\r\n        attributeDBName: 'teamName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Name',\r\n        attributeDBName: 'name',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Role',\r\n        attributeDBName: 'role',\r\n        align:'left'\r\n    },\r\n    {\r\n        title: 'Race',\r\n        attributeDBName: 'race',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Class',\r\n        attributeDBName: 'class',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Item Level',\r\n        attributeDBName: 'gearScore',\r\n        align: 'left'\r\n    },\r\n];\r\n\r\n\r\nexport default function CharacterTable({setMakeRaidMode, setAddCharMode, setOneRaidMode, setRaid, setChars }) {\r\n    const [characters, setCharacters] = useState([]);\r\n    const [raidteams, setRaidTeams] = useState([]);\r\n    const [openRows, setOpenRows] = useState([]);\r\n    const [buttonClicked, setButtonClicked] = useState(false); // State to track button click\r\n    const [raidTeam_id, setRaidTeam_id] = useState(null);\r\n    const [deleteMode, setDeleteMode] = useState(false);\r\n    const [removeMode, setRemoveMode] = useState(false);\r\n    const [character_id, setCharacter_id] = useState(null);\r\n    const [raidTeamName, setRaidTeamName] = useState(\"\");\r\n    const [highlightMode, setHighlightMode] = useState(false);\r\n    const [hoveredIdx, setHoveredIdx] = useState(null);\r\n    const [hoveredCIdx, setCHoveredIdx] = useState(null);\r\n    const [reloadTable, setReloadTable] = useState(false);\r\n    //ALL TEAMS\r\n\r\n    useEffect(() => {\r\n        const api = new API();\r\n\r\n        async function getRaidTeams() {\r\n            const raidteamsJSONString = await api.allRaidTeams();\r\n            console.log(`raidteams from the DB ${JSON.stringify(raidteamsJSONString)}`);\r\n            setRaidTeams(raidteamsJSONString.data);\r\n        }\r\n        setReloadTable(false);\r\n        getRaidTeams();\r\n    }, [reloadTable]);\r\n\r\n    //DROP DOWN ARROW\r\n    \r\n    useEffect(() => {\r\n        if (raidTeam_id) { // Only run the effect if raidTeam_id is not null\r\n            const api = new API();\r\n    \r\n            async function charsForRaidTeam() {\r\n                const charactersJSONString = await api.charsForRaidTeam(JSON.stringify(raidTeam_id));\r\n                console.log(JSON.stringify(raidTeam_id));\r\n                console.log(`characters from the DB ${JSON.stringify(charactersJSONString)}`);\r\n                setCharacters(charactersJSONString.data);\r\n                setOpenRows(new Array(charactersJSONString.data.length).fill(false));\r\n            }\r\n    \r\n            charsForRaidTeam();\r\n        }\r\n    }, [raidTeam_id]); // Add raidTeam_id to the dependency array\r\n     // Execute useEffect whenever buttonClicked changes\r\n\r\n    //REMOVE CHARACTER\r\n\r\n    useEffect(() => {\r\n        if (removeMode) {\r\n            const api = new API();\r\n            async function removeChar() {\r\n                try {\r\n                    console.log('here you are');\r\n                    console.log(character_id);\r\n                    const userInfo = await api.removeChar(JSON.stringify(character_id));\r\n                    console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n                } catch (error) {\r\n                    console.error('Failed to remove character from team:', error);\r\n                }\r\n            }\r\n            \r\n            removeChar().then(() => {\r\n                setRemoveMode(false); // Reset deleteMode to prevent repeated deletion\r\n                setReloadTable(true);\r\n            });\r\n        }\r\n    }, [removeMode, character_id]);\r\n\r\n    //DELETE TEAM\r\n\r\n    useEffect(() => {\r\n        if (deleteMode) {\r\n            const api = new API();\r\n            async function deleteRaid() {\r\n                try {\r\n                    console.log('here you are');\r\n                    console.log(raidTeam_id);\r\n                    const userInfo = await api.deleteRaid(JSON.stringify(raidTeam_id));\r\n                    console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n                } catch (error) {\r\n                    console.error('Failed to delete raid team:', error);\r\n                }\r\n            }\r\n            \r\n            deleteRaid().then(() => {\r\n                setDeleteMode(false); // Reset deleteMode to prevent repeated deletion\r\n                setReloadTable(true);\r\n            });\r\n        }\r\n    }, [deleteMode, raidTeam_id]);\r\n\r\n\r\n    //HANDLERS\r\n\r\n    const handleRaidClick = (raid) => {\r\n        console.log(raid);\r\n        console.log(characters);\r\n        setRaid(raid);\r\n        setChars(characters);\r\n        setOneRaidMode(true);\r\n    };\r\n\r\n    const handleMouseEnter = (index) => {\r\n        setHoveredIdx(index);  // Set the currently hovered row index\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setHoveredIdx(null);  // Clear the hovered row index\r\n    };\r\n\r\n    const handleCMouseEnter = (index) => {\r\n        setCHoveredIdx(index);  // Set the currently hovered row index\r\n    };\r\n\r\n    const handleCMouseLeave = () => {\r\n        setCHoveredIdx(null);  // Clear the hovered row index\r\n    };\r\n\r\n    \r\n\r\n    const handleRowToggle = (index) => {\r\n        setRaidTeam_id(index.raidTeam_id);\r\n        const newOpenRows = [...openRows];\r\n        newOpenRows[index] = !newOpenRows[index];\r\n        setOpenRows(newOpenRows);\r\n    };\r\n\r\n    const handleButtonClick = (raidTeam_id) => {\r\n        setButtonClicked(true); // Set buttonClicked to true when button is clicked\r\n        setRaidTeam_id(raidTeam_id);\r\n    };\r\n\r\n    const handleRemove = async (char, event) => {\r\n        event.stopPropagation(); // This stops the event from bubbling up to the parent elements.\r\n        console.log(char.raidTeam_id);\r\n        setCharacter_id(char.character_id);\r\n        setRemoveMode(true);\r\n        console.log(\"Remove clicked for\", char);\r\n    };\r\n\r\n    const handleDelete = (raidteam, event) => {\r\n        event.stopPropagation(); // This stops the event from bubbling up to the parent elements.\r\n        console.log(raidteam.raidTeam_id);\r\n        setRaidTeam_id(raidteam.raidTeam_id); // Assuming you rename setRaidTeam to setRaidTeamId for clarity\r\n        setDeleteMode(true);\r\n        console.log(\"Delete clicked for\", raidteam);\r\n    };\r\n    \r\n    return (\r\n        <Fragment>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6} sm={6}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <Button variant=\"outlined\" color=\"success\" onClick={() => setMakeRaidMode(true)}>\r\n                            Add Raid Team\r\n                            <IconButton\r\n                                aria-label=\"add character\"\r\n                                size=\"large\"\r\n                                color=\"green\"\r\n                                sx={{ fontSize: '2rem', ml: 1 }}\r\n                            >\r\n                                <AddIcon sx={{ fontSize: 'inherit' }} />\r\n                            </IconButton>\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid> \r\n    \r\n            {raidteams.length > 0 && (\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"market table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell></TableCell>\r\n                                {raidteamsTableAttributes.map((attr, idx) => (\r\n                                    <TableCell key={idx} align={attr.align}>\r\n                                        {attr.title}\r\n                                    </TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {raidteams.map((team, idx) => (\r\n                                <Fragment key={idx}>\r\n                                    <TableRow sx={{ backgroundColor: idx === hoveredIdx ? '#CFD8D7' : 'inherit' }}\r\n                                        onMouseEnter={() => handleMouseEnter(idx)}\r\n                                        onMouseLeave={handleMouseLeave}\r\n                                    >\r\n                                        <TableCell>\r\n                                            <IconButton key={idx}\r\n                                                aria-label=\"expand row\"\r\n                                                size=\"small\"\r\n                                                onClick={() => {\r\n                                                    \r\n                                                    handleRowToggle(idx);\r\n                                                    handleButtonClick(raidteams[idx]['raidTeam_id']);\r\n                                                }}\r\n                                            >\r\n                                                {openRows[idx] ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                        {raidteamsTableAttributes.map((attr, idx) => (\r\n                                            <TableCell key={idx} align={attr.align} onClick={() => handleRaidClick(team)}>\r\n                                                {team[attr.attributeDBName]}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                        <TableCell align=\"center\">\r\n                                            <Button variant=\"outlined\" color=\"error\" onClick={(event) => handleDelete(team, event)}>\r\n                                                Delete\r\n                                            </Button>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    {openRows[idx] && (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={raidteamsTableAttributes.length + 1}>\r\n                                                <TableContainer component={Paper}>\r\n                                                    <Table size=\"small\" sx={{ backgroundColor: '#E6EEF0' }}> \r\n                                                        <TableHead>\r\n                                                            <TableRow>\r\n                                                                {characterTableAttributes.map((attr, idx) => (\r\n                                                                    <TableCell key={idx} align={attr.align}>\r\n                                                                        {attr.title}\r\n                                                                    </TableCell>\r\n                                                                ))}\r\n                                                            </TableRow>\r\n                                                        </TableHead>\r\n                                                        <TableBody>\r\n                                                            {Array.isArray(characters) && characters.map((character, idx) => (\r\n\r\n                                                                <TableRow key={idx} sx={{ backgroundColor: idx === hoveredCIdx ? '#CFD8D7' : 'inherit' }}\r\n                                                                onMouseEnter={() => handleCMouseEnter(idx)}\r\n                                                                onMouseLeave={handleCMouseLeave}>\r\n                                                                    {characterTableAttributes.map((attr, idx) => (\r\n                                                                        <TableCell key={idx} align={attr.align}>\r\n                                                                           {character[attr.attributeDBName]}\r\n                                                                        </TableCell>\r\n                                                                    ))}\r\n                                                                    <TableCell align=\"center\">\r\n                                                                        <Button variant=\"outlined\" color=\"error\" onClick={(event) => handleRemove(character, event)}>\r\n                                                                            Remove\r\n                                                                        </Button>\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            ))}\r\n                                                        </TableBody>\r\n                                                    </Table>\r\n                                                </TableContainer>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </Fragment>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            )}\r\n        </Fragment>\r\n    );\r\n    \r\n    \r\n};\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, InputLabel, MenuItem, FormHelperText, FormControl, Select, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setMakeRaidMode}) {\r\n  const [teamName, setTeamName] = useState(\"\");\r\n  const [numPlayers, setNumPlayers] = useState(\"\");\r\n  const [raidDay_A, setRaidDayA] = useState(\"\");\r\n  const [raidDay_B, setRaidDayB] = useState(\"\");\r\n  const [raidTime, setRaidTime] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [raidCheck, setRaidCheck] = useState(false);\r\n\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Raid Team Called');\r\n    setRaidCheck(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    console.log('Raid Mode called');\r\n    setMakeRaidMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR RAID\r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0) return;\r\n    const api = new API();\r\n    async function checkRaidName() {\r\n        api.checkRaidName(teamName)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkRaidName();\r\n  }, [raidCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0 || numPlayers.length === 0 || raidTime.length === 0) return;\r\n    const api = new API();\r\n    async function createRaidTeam() {\r\n        api.createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Raid Team Created!\");\r\n          setMakeRaidMode(false);\r\n        } else {\r\n          alert(\"Creation NOT Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    createRaidTeam();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Create Raid Team\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"teamName\"\r\n                  label=\"Team Name\"\r\n                  name=\"teamName\"\r\n                  value={teamName}\r\n                  onChange={(n) => setTeamName(n.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"numPlayers\"\r\n                  label=\"Raid Team Size\"\r\n                  name=\"numPlayers\"\r\n                  value={numPlayers}\r\n                  onChange={(p) => setNumPlayers(p.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd1\">Raid Day 1</InputLabel>\r\n                    <Select\r\n                    id=\"rd1\"\r\n                    value={raidDay_A}\r\n                    label=\"Raid Day 1\"\r\n                    onChange={(a) => setRaidDayA(a.target.value)}\r\n                    >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                    <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                    <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                    <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                    <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                    <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                    <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n                <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"raidTime\"\r\n                  label=\"Time of Raid\"\r\n                  name=\"raidTime\"\r\n                  value={raidTime}\r\n                  onChange={(t) => setRaidTime(t.target.value)}\r\n                />\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Raid Team\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleGoBack} >\r\n                  Already have a Raid Team? Go back\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, { Fragment, useState } from 'react';\r\n//import Calendar from '../Calendar/Calendar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add'; // Make sure to import AddIcon\r\nimport Grid from '@mui/material/Grid';\r\nimport { BarChart } from '@mui/x-charts/BarChart';\r\nimport { Divider } from '@mui/material';\r\nimport { PieChart } from '@mui/x-charts/PieChart';\r\nimport Character from \"../Characters/Characters\";\r\n\r\nexport default function OneRaidTeam({ raid, chars}) {\r\n    // Assuming you manage the state of adding a character to the raid\r\n    const [addCharMode, setAddCharMode] = useState(false);\r\n    const [viewCharacters, setViewCharacters] = useState(false);\r\n\r\n    const roleCount = {};\r\n    \r\n    chars.forEach(character => {\r\n        const role = character.role;\r\n        roleCount[role] = (roleCount[role] || 0) + 1;\r\n    });\r\n\r\n    console.log(roleCount)\r\n\r\n    return (\r\n        <Fragment>\r\n            \r\n            <Grid container spacing={2}>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"h3\">\r\n                        Team Name: {raid.teamName} \r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"h3\">\r\n                        Raid Days: {raid.raidDay_A} / {raid.raidDay_B} \r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"h3\">\r\n                        Raid Time: {raid.raidTime}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"h3\">\r\n                        Team Size: {raid.numPlayers}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Divider />\r\n            \r\n                    \r\n                \r\n            <BarChart\r\n                series={[\r\n                    { data: chars.map(char => char.gearScore) } // Array of gear scores for each character\r\n                ]}\r\n                height={300}\r\n                xAxis={[\r\n                    { \r\n                        data: chars.map(char => char.name), \r\n                        scaleType: 'band',\r\n                        tickLabelAngle: -45, // Rotate labels by -45 degrees\r\n                        tickLabelProps: () => ({\r\n                            textAnchor: 'end', // Align text to the end of the tick\r\n                            fontSize: '10px', // Adjust font size if necessary\r\n                            dy: '0.5em' // Adjust vertical position of label\r\n                        })\r\n                    }\r\n                ]}\r\n                margin={{ top: 10, bottom: 60, left: 40, right: 10 }} // Increase bottom margin to accommodate rotated labels\r\n                />  \r\n\r\n                \r\n\r\n\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6} sm={6}>\r\n                <PieChart\r\n                    series={[\r\n                        {\r\n                            data: Object.keys(roleCount).map(role => ({\r\n                                id: role,\r\n                                value: roleCount[role],\r\n                                label: `${role}: ${roleCount[role]}`\r\n                            }))\r\n                        }\r\n                    ]}\r\n                    width={400}\r\n                    height={200}\r\n                />\r\n\r\n                </Grid>\r\n                <Grid item xs={6} sm={6}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Button\r\n                            variant=\"outlined\"\r\n                            color=\"success\"\r\n                            onClick={() => setViewCharacters(true)}  // Set state to show characters\r\n                        >\r\n                            View Characters\r\n                            <IconButton\r\n                                aria-label=\"add character\"\r\n                                size=\"large\"\r\n                                color=\"success\"\r\n                                sx={{ fontSize: '2rem', ml: 1 }}\r\n                            >\r\n                                <AddIcon sx={{ fontSize: 'inherit' }} />\r\n                            </IconButton>\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {/* Conditionally Render Character Component with Raid ID */}\r\n            {viewCharacters && (\r\n                <Character raidID={raid.raidTeam_id} />  // Pass the raid ID to the Character component\r\n            )}\r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { Fragment, useState } from 'react';\r\nimport MakeRaidTeam from './MakeRaidTeam';\r\nimport CharsForRaidTeam from './CharsForRaidTeam';\r\nimport AddCharToTeam from './AddCharToTeam';\r\nimport OneRaidTeam from './OneRaidTeam';\r\n\r\nexport default function RaidTeams() {\r\n    \r\n    const [makeRaidMode, setMakeRaidMode] = useState(false);    \r\n    const [addCharMode, setAddCharMode] = useState(false);\r\n    const [raid, setRaid] = useState(undefined);\r\n    const [chars, setChars] = useState([]);\r\n    const [oneRaidMode, setOneRaidMode] = useState(false);\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {   \r\n                oneRaidMode ? (\r\n               <OneRaidTeam raid={raid} chars={chars} /> \r\n            )\r\n              :  makeRaidMode ? (\r\n                <MakeRaidTeam setMakeRaidMode={setMakeRaidMode} />\r\n            ) : addCharMode ? (\r\n                <AddCharToTeam setAddCharMode={setAddCharMode}/>\r\n            )  :    (\r\n                <CharsForRaidTeam \r\n                    setOneRaidMode={setOneRaidMode} \r\n                    setRaid={setRaid}\r\n                    setChars={setChars}\r\n                    setMakeRaidMode={setMakeRaidMode} \r\n                    setAddCharMode={setAddCharMode} \r\n                />\r\n            )\r\n        \r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n","import React, {Fragment} from 'react';\nimport Typography from '@mui/material/Typography';\n\nexport default function Summary(props) {\n    return (\n        <Fragment>\n            \n            <Typography component=\"div\" variant='h3'>\n                Summary here\n            </Typography>\n        </Fragment>\n    )\n}\n","import Accounts from '../Components/Accounts/Accounts';\nimport Characters from '../Components/Characters/Characters';\nimport RaidTeams from '../Components/RaidTeams/RaidTeams';\nimport Summary from '../Components/SummaryPage/Summary';\n\nconst presentationComponents = (props) => {\n    return [\n        {\n            title: 'Summary',\n            component: <Summary/>\n        },\n        {\n            title: 'Raid Team',\n            component: <RaidTeams/>\n        },\n        {\n            title: 'Account',\n            component: <Accounts/>\n        },\n        {\n            title: 'Add Character',\n            component: <Characters/>\n        },\n    ];\n};\n\n\nexport {presentationComponents};\n","import React, { Fragment, useState } from \"react\";\nimport { styled, useTheme } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Drawer from \"@mui/material/Drawer\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport MuiAppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport List from \"@mui/material/List\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport {\n  presentationComponents,\n  containerComponents,\n} from \"./MenuPresentationComponents\";\nimport Button from \"@mui/material/Button\";\n\n//const drawerWidth = 240;\n\nconst Main = styled(\"main\")(\n  ({ theme }) => ({\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    marginLeft: 0, // Keep margin left constant at 0\n  })\n);\n\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== \"open\",\n})(({ theme}) => ({\n  transition: theme.transitions.create([\"margin\", \"width\"], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  })\n}));\n\nconst DrawerHeader = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n  justifyContent: \"flex-end\",\n}));\n\n// Component used to hold the navigation bar\nconst TopBar = ({ open, selectedItem, handleSelectedItem, logoutAction }) => {\n  // This component is responsible for rendering the Toolbar that is drawn\n  // at the top of the drawer.\n\n  return (\n    <Fragment>\n      <AppBar position=\"fixed\" open={false}>\n        <Toolbar>\n          <List>\n            <PresentationListItems\n              selectedItem={selectedItem}\n              onClick={handleSelectedItem}\n              menuItemTitles={presentationComponents().map(\n                (comp) => comp.title\n              )}\n            />\n          </List>\n          <Box width=\"100%\" justifyContent=\"right\" flex={1}>\n            <Typography\n              variant=\"h7\"\n              noWrap\n              component=\"div\"\n              align=\"right\"\n              onClick={() => logoutAction()}\n            >\n              Logout\n            </Typography>\n          </Box>\n        </Toolbar>\n      </AppBar>\n    </Fragment>\n  );\n};\n\nconst PresentationListItems = (props) => {\n  return (\n    <div style={{ display: \"flex\" }}>\n      {props.menuItemTitles.map((title) => (\n        <ListItem\n          button\n          style={{\n            color: props.selectedItem === title ? \"blue\" : \"inherit\",\n            width: \"fit-content\",\n          }}\n          onClick={() => props.onClick(title)}\n          key={title}\n        >\n          <ListItemText primary={title} key={title} />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nconst findSelectedComponent = (selectedItem) => {\n  const component = [...presentationComponents()].filter(\n    (comp) => comp.title === selectedItem\n  );\n  if (component.length === 1) return component[0];\n\n  console.log(\n    \"In findSelectedComponent of MakeEligible. Didn't find the component that corresponds to the menu item.\"\n  );\n  return {\n    title: null,\n    component: null,\n  };\n};\n\nexport default function MainDraswer({ title, user, logoutAction }) {\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(true);\n  const [selectedItem, setSelectedItem] = useState(\"Summary\");\n\n  console.log(\"in MainDrawer\");\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleSelectedItem = (title) => {\n    setSelectedItem(title);\n  };\n\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n      <TopBar\n        selectedItem={selectedItem}\n        handleSelectedItem={handleSelectedItem}\n        open={open}\n        logoutAction={logoutAction}\n      />\n      {\n      // Allow each link to display components\n      }\n      <Main open={open}>\n        <DrawerHeader />\n        {findSelectedComponent(selectedItem).component}\n      </Main>\n    </Box>\n  );\n}\n","import { Fragment } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport MainDrawer from \"./menu/MainDrawer\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#fefefe\",\n    },\n  },\n  // Used for fonts\n  typography: {},\n});\n\nconst makeUserName = ({ email, userName }) => {\n  return `${email} ${userName}`;\n};\n\nexport default function App({ user, logoutAction }) {\n  const mainPageTitle = \"WoW-Teamz\";\n\n  return (\n    <ThemeProvider theme={theme}>\n      <MainDrawer\n        title={mainPageTitle}\n        user={makeUserName(user)}\n        logoutAction={logoutAction}\n      />\n    </ThemeProvider>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"./API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setSignupMode, setUser}) {\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [userCheck, setUserCheck] = useState(false);\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Signup Called');\r\n    setUserCheck(true);\r\n    console.log(email);\r\n  };\r\n\r\n  const handleSignin = () => {\r\n    console.log('Signin called');\r\n    setSignupMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR USER\r\n\r\n  useEffect(() => {\r\n    if (email.length === 0) return;\r\n    const api = new API();\r\n    async function checkUserEmail() {\r\n        api.checkUserEmail(email)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkUserEmail();\r\n  }, [userCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (email.length === 0 || userName.length === 0 || password.length === 0) return;\r\n    const api = new API();\r\n    async function insertNewUser() {\r\n        api.insertNewUser(userName, email, password)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        const user = newUserInfo.data.user;\r\n        console.log(\"BELOW IS USER\");\r\n        console.log(user);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Signup Sucessful, Thank you for signing up!\");\r\n          setUser(user);\r\n          setSignupMode(false);\r\n        } else {\r\n          alert(\"Signup Not Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    insertNewUser();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"userName\"\r\n                  label=\"User Name\"\r\n                  name=\"userName\"\r\n                  value={userName}\r\n                  onChange={(u) => setUserName(u.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"new-password\"\r\n                  value={password}\r\n                  onChange={(p) => setPassword(p.target.value)}\r\n                />\r\n              </Grid>\r\n              \r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleSignin} >\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, { Fragment, useState } from 'react';\nimport Login from './Login';\nimport App from './App';\nimport Signup from './Signup';\n\nexport default function Main() {\n    const [user, setUser] = useState(undefined);\n    const [signupMode, setSignupMode] = useState(false);\n\n    const logout = (setUser) => {\n        return () => {\n            setUser(undefined);\n        }\n    };\n\n    \n\n    return (\n        <Fragment>\n            {\n                user !== undefined ? (\n                    <App user={user} logoutAction={logout(setUser)} />\n                ) : (\n                    signupMode ? (\n                        <Signup user={user} setUser={setUser} setSignupMode={setSignupMode}/>\n                    ) : (\n                        <Login user={user} setUser={setUser} setSignupMode={setSignupMode} />\n                    )\n                )\n            }\n        </Fragment>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}