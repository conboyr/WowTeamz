{"version":3,"sources":["API_Interface/API_Interface.js","Login.js","Components/Accounts/Accounts.js","Components/Characters/Characters.js","Components/RaidTeams/MakeRaidTeam.js","Components/RaidTeams/CharsForRaidTeam.js","Components/RaidTeams/AddCharToTeam.js","Components/RaidTeams/OneRaidTeam.js","Components/RaidTeams/RaidTeams.js","Components/SummaryPage/Summary.js","menu/MenuPresentationComponents.js","menu/MainDrawer.js","App.js","Signup.js","Main.js","reportWebVitals.js","index.js"],"names":["axiosAgent","axios","defaults","headers","common","baseURL","withCredentials","APIInterface","getUserInfo","email","password","console","log","JSON","stringify","post","checkUserEmail","get","concat","insertNewUser","userName","insertCharacter","then","response","data","catch","error","character","undefined","allCharacters","deleteCharacter","characterName","delete","encodeURIComponent","insertNotes","notes","allAccounts","accountWithEmail","allRaidTeams","checkRaidName","teamName","createRaidTeam","numPlayers","raidDay_A","raidDay_B","raidTime","addPlayerToRaid","raidteam_id","character_id","charsForRaidTeam","raidTeam_id","deleteRaid","defaultTheme","createTheme","Login","_ref","setUser","setSignupMode","setEmail","useState","setPassword","authFailed","setAuthFailed","verifyUser","setVerifyUser","useEffect","api","API","async","userInfo","user","status","_jsx","ThemeProvider","theme","children","_jsxs","Grid","container","component","sx","height","CssBaseline","item","xs","sm","md","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","Paper","elevation","square","Box","my","mx","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","noValidate","mt","TextField","label","fullWidth","value","onChange","e","target","margin","helperText","type","p","FormControlLabel","control","Checkbox","color","Button","mb","onClick","handleLogin","length","marginLeft","handleSignup","accountsTableAttributes","title","attributeDBName","align","NameInputComponent","userInput","setUserInput","accounts","setAccounts","accountsJSONString","getAccounts","TRow","accountObject","TableRow","border","map","attr","idx","TableCell","Fragment","TableContainer","Table","minWidth","TableHead","TableBody","account","characterTableAttributes","raidBuffRequirements","Paladin","Druid","DemonHunter","Monk","Priest","Mage","Evoker","Hunter","Warrior","Rogue","Warlock","isEditing","setIsEditing","name","setName","characters","setCharacters","editIdx","setEditIdx","editedText","setEditedText","expandedId","setExpandedId","characterCount","setCharacterCount","missingBuffs","setMissingBuffs","calculateMissingBuffs","classCounts","Object","keys","forEach","requiredClass","className","replace","warn","standardizeClassName","class","hasOwnProperty","entries","requiredCount","countShort","push","fetchCharacters","intervalId","setInterval","clearInterval","every","char","buffs","handleAddName","characterData","prev","cancelEdit","buff","index","size","React","src","alt","style","width","IconButton","ExpandLessIcon","ExpandMoreIcon","detail","handleEdit","MoreVertIcon","encodedName","Error","filter","handleDelete","updatedCharacter","i","saveEdit","colSpan","whiteSpace","onBlur","onKeyPress","key","fontSize","AddIcon","SignUp","setMakeRaidMode","setTeamName","setNumPlayers","setRaidDayA","setRaidDayB","setRaidTime","exist","setExist","raidCheck","setRaidCheck","newUserInfo","alert","Container","maxWidth","marginTop","spacing","required","id","n","FormControl","InputLabel","Select","a","MenuItem","b","FormHelperText","t","handleSubmit","justifyContent","Link","handleGoBack","raidteamsTableAttributes","CharacterTable","setAddCharMode","setOneRaidMode","setRaid","raidteam","setRaidTeam","openRows","setOpenRows","buttonClicked","setButtonClicked","setRaidTeam_id","deleteMode","setDeleteMode","removeChar","setRemoveChar","setCharacterName","raidTeamName","setRaidTeamName","highlightMode","setHighlightMode","hoveredIdx","setHoveredIdx","reloadTable","setReloadTable","raidteamsJSONString","getRaidTeams","getCharacters","charactersJSONString","Array","fill","handleMouseLeave","ml","team","backgroundColor","onMouseEnter","onMouseLeave","event","stopPropagation","newOpenRows","handleRowToggle","handleButtonClick","KeyboardArrowUpIcon","KeyboardArrowDownIcon","handleRaidClick","raid","isArray","handleRemove","OneRaidTeam","addCharMode","Divider","PieChart","series","BarChart","xAxis","scaleType","top","bottom","left","right","RaidTeams","makeRaidMode","oneRaidMode","MakeRaidTeam","AddCharToTeam","CharsForRaidTeam","Summary","props","presentationComponents","Accounts","Characters","Main","styled","shouldForwardProp","prop","open","flexGrow","padding","transition","transitions","create","easing","sharp","duration","leavingScreen","easeOut","enteringScreen","AppBar","MuiAppBar","_ref2","DrawerHeader","_ref3","mixins","toolbar","TopBar","_ref4","selectedItem","handleSelectedItem","logoutAction","position","Toolbar","List","PresentationListItems","menuItemTitles","comp","flex","noWrap","ListItem","button","ListItemText","primary","findSelectedComponent","MainDraswer","_ref5","useTheme","setOpen","setSelectedItem","palette","main","typography","makeUserName","App","MainDrawer","setUserName","userCheck","setUserCheck","u","autoComplete","handleSignin","signupMode","logout","Signup","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92c557af.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst AxiosConfigured = () => {\n    // Indicate to the API that all requests for this app are AJAX\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n    // Set the baseURL for all requests to the API domain instead of the current domain\n    // axios.defaults.baseURL = `http://localhost:8443/api/v1`;\n    axios.defaults.baseURL = `http://localhost:8443/api/v1`;\n\n\n    // Allow the browser to send cookies to the API domain (which include auth_token)\n    axios.defaults.withCredentials = true;\n\n\n//    axios.defaults.headers.common['X-CSRF-TOKEN'] = csrf_token;\n\n    return axios;\n};\n\n\nconst axiosAgent = AxiosConfigured();\n\nexport default class APIInterface {\n\n    //Login\n\n    async getUserInfo(email, password) {\n        console.log(JSON.stringify(email));\n        console.log(JSON.stringify(password));\n        return axiosAgent.post(`/login/`, {email, password});\n    }\n\n    //Signup\n\n    async checkUserEmail(email) {\n        return axiosAgent.get(`/signup/${email}`);\n    }\n\n    async insertNewUser(userName, email, password) {\n        console.log(JSON.stringify(email));\n        console.log(JSON.stringify(password));\n        return axiosAgent.post(`/signup/`, {email, password, userName});\n    }\n\n    //Characters\n\n    async insertCharacter(userName) {\n        return axiosAgent.post(`/characters/insert`, { userName })\n            .then(response => response.data)\n            .catch(error => ({\n                error,\n                character: undefined\n            }));\n    }\n    async allCharacters() {\n        return axiosAgent.get(`characters/all-characters`);\n\n    }\n\n    async deleteCharacter(characterName) {\n        return axios.delete(`/characters/delete/${encodeURIComponent(characterName)}`);\n    }\n    \n    async insertNotes(characterName, notes) {\n        return axios.post(`/characters/insert-notes/${encodeURIComponent(characterName)}`, { notes });\n    }\n\n    //Accounts\n\n    async allAccounts() {\n        return axiosAgent.get(`accounts/all-accounts`);\n    }\n\n    async accountWithEmail(email) {\n        return axiosAgent.get(`accounts/${email}`);\n    }\n\n\n    //Raid Teams\n\n    async allRaidTeams() {\n        return axiosAgent.get(`raidteams/all-raidteams`);\n    }\n\n    async checkRaidName(teamName) {\n        return axiosAgent.get(`/raidteams/${teamName}`);\n    }\n\n    async createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime) {\n        return axiosAgent.post(`/raidteams/`, {teamName, numPlayers, raidDay_A, raidDay_B, raidTime});\n    }\n\n    async addPlayerToRaid(raidteam_id, character_id) {\n        return axiosAgent.get(`raidteams/${raidteam_id}/${character_id}`);\n    }\n\n    async charsForRaidTeam(raidTeam_id) {\n        return axiosAgent.get(`/raidteams/${raidTeam_id}/chars-for-raidteam`);\n    }\n\n    async deleteRaid(raidTeam_id) {\n        return axios.delete(`/raidteams/delete/${raidTeam_id}`);\n    }\n\n}","import React, { useState, useEffect } from \"react\";\nimport API from \"./API_Interface/API_Interface\";\nimport {\n  Avatar, Box, Button, Checkbox, CssBaseline, Divider, FormControlLabel,\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\n} from \"@mui/material\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\n\nconst defaultTheme = createTheme();\n\nexport default function Login({ setUser, setSignupMode}) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [authFailed, setAuthFailed] = useState(false);\n  const [verifyUser, setVerifyUser] = useState(false);\n  //const [newUser, setNewUser] = useState(false);\n \n  const handleLogin = () => {\n    console.log(\"handleLogin called.\");\n    if (email.length === 0 || password.length === 0) {\n      setAuthFailed(true);\n    } else {\n      setAuthFailed(false);\n      setVerifyUser(true);  // Move user verification flag here\n    }\n  };\n\n  const handleSignup = () => {\n    console.log(\"handleSignup called.\");\n    setSignupMode(true); // Toggle signup mode to true\n  };\n\n\n  useEffect(() => {\n    if (!verifyUser) return;\n\n    const api = new API();\n    async function getUserInfo() {\n        api.getUserInfo(email, password)\n        .then( userInfo => {\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo)}`);\n        const user = userInfo.data.user;\n        console.log(\"BELOW IS USER\");\n        console.log(user);\n        if (userInfo.data.status === \"OK\") {\n          console.log(\"SETTING USER to USER\");\n          setUser(user);\n        } else {\n          setVerifyUser(false);\n          setAuthFailed(true);\n        }\n      });\n    }\n    getUserInfo();\n  }, [verifyUser, email, password, setUser]); // Ensure dependencies are correctly listed\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Grid container component=\"main\" sx={{ height: \"100vh\" }}>\n        <CssBaseline />\n        <Grid item xs={false} sm={4} md={7} sx={{\n          backgroundImage: \"url(https://wallpapers.com/images/hd/world-of-warcraft-restoration-druid-healing-69ucodb01a3oyfab.webp)\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n        }} />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box sx={{ \n            my: 8, mx: 4, display: \"flex\", flexDirection: \"column\", alignItems: \"center\"\n          }}>\n            <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Sign in\n            </Typography>\n            <Box component=\"form\" noValidate sx={{ mt: 1}}>\n              <TextField\n                error={authFailed}\n                label=\"Email\"\n                fullWidth\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                margin=\"normal\"\n                helperText={authFailed ? \"Invalid email or password\" : \"\"}\n              />\n              <TextField\n                error={authFailed}\n                label=\"Password\"\n                type=\"password\"\n                fullWidth\n                value={password}\n                onChange={(p) => setPassword(p.target.value)}\n                margin=\"normal\"\n                helperText={authFailed ? \"Invalid email or password\" : \"\"}\n              />\n              <FormControlLabel\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                label=\"Remember me\"\n              />\n              <Button\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n                onClick={handleLogin}\n              >\n                Sign In\n              </Button>\n              \n                \n                <Button\n                  variant=\"contained\"\n                  sx={{ mt: 3, mb: 2, marginLeft: 1 }} // Added marginLeft to create space between the Typography and Button\n                  onClick={handleSignup}\n                >\n                  Sign up here\n                </Button>\n              \n\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n}\n","import React, {useState, useEffect, Fragment} from 'react';\r\nimport API from '../../API_Interface/API_Interface'\r\n\r\n\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\n//import TextField from '@mui/material/TextField';\r\n//import Button from '@mui/material/Button';\r\n//import Box from '@mui/material/Box';\r\n//import Divider from '@mui/material/Divider';\r\n//import Avatar from '@mui/material/Avatar';\r\n//import CssBaseline from '@mui/material/CssBaseline';\r\n//import FormControlLabel from '@mui/material/FormControlLabel';\r\n//import Checkbox from '@mui/material/Checkbox';\r\n//import Link from '@mui/material/Link';\r\n//import Grid from '@mui/material/Grid';\r\n//import LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\n//import { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\n\r\n\r\nconst accountsTableAttributes = [\r\n    {\r\n        title: 'Email',\r\n        attributeDBName: 'email',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'User Name',\r\n        attributeDBName: 'userName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Account ID',\r\n        attributeDBName: 'account_id',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Role',\r\n        attributeDBName: 'role',\r\n        align: 'left'\r\n    },\r\n]; \r\n\r\nexport default function NameInputComponent() {\r\n\r\n//START display of characters in database\r\n\r\n    const [userInput, setUserInput] = useState('');\r\n    const [verifyUser, setVerifyUser] = useState(false);\r\n    const [authFailed, setAuthFailed] = useState(false);\r\n    const [user, setUser] = useState(undefined);\r\n\r\n    const handleInputChange = event => {\r\n        console.log(\"handleInputChange called.\");\r\n\r\n        setUserInput(event.target.value);\r\n        setAuthFailed(false);\r\n\r\n        if(event.key === \"Sign In\") {\r\n            console.log(\"handleKeyPress: Verify user input.\");\r\n            setVerifyUser(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n \r\n        if( ! verifyUser || userInput.length === 0)\r\n            return;\r\n\r\n        const api = new API();\r\n        async function getUserInfo() {\r\n            api.getUserInfo(userInput)\r\n                .then( userInfo => {\r\n                console.log(`api returns user info and it is: ${JSON.stringify(userInfo)}`);\r\n                const user = userInfo.user;\r\n                if( userInfo.status === \"OK\" ) {\r\n                    setUser(user);\r\n                } else  {\r\n                    setVerifyUser(false);\r\n                    setAuthFailed(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        getUserInfo();\r\n    }, [verifyUser, setUser, userInput]);\r\n\r\n    const [accounts, setAccounts] = useState([]);\r\n    console.log(`in AccountTable accounts contains is ${JSON.stringify(accounts)}`);\r\n\r\n\r\n    useEffect(() => {\r\n        const api = new API();\r\n\r\n        async function getAccounts() {\r\n            const accountsJSONString = await api.allAccounts();\r\n            console.log(`accounts from the DB ${JSON.stringify(accountsJSONString)}`);\r\n            setAccounts(accountsJSONString.data);\r\n        }\r\n\r\n        getAccounts();\r\n    }, []);\r\n    \r\n    const TRow = ({accountObject, onClick}) => {\r\n        return <TableRow\r\n            sx={{'&:last-child td, &:last-child th': {border: 0}}}\r\n        >\r\n            {\r\n                accountsTableAttributes.map((attr, idx) =>\r\n                    <TableCell key={idx} onClick={() => onClick(accountObject)}\r\n                               align={attr.align}>\r\n                        {\r\n                            accountObject[attr.attributeDBName]\r\n                        }\r\n                    </TableCell>)\r\n            }\r\n        </TableRow>\r\n    }\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n            Here is a list of all your characters that reside in your account.\r\n            </Typography> \r\n        {\r\n            accounts.length > 0 &&\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{minWidth: 650}} aria-label=\"account table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {\r\n                                    accountsTableAttributes.map((attr, idx) =>\r\n                                        <TableCell  key={idx}\r\n                                                    align={attr.align}>\r\n                                            {attr.title}\r\n                                        </TableCell>)\r\n                                }\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                accounts.map((account, idx) => (\r\n                                    <TRow accountObject={account} key={idx}/>\r\n                                ))\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n        }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport API from '../../API_Interface/API_Interface'; // Ensure this path is correct\r\nimport { Box, TextField, IconButton, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\nconst characterTableAttributes = [\r\n    {\r\n        title: 'Image',\r\n        attributeDBName: 'imagePath',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Name',\r\n        attributeDBName: 'name',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Race',\r\n        attributeDBName: 'race',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Class',\r\n        attributeDBName: 'class',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Item Level',\r\n        attributeDBName: 'gearScore',\r\n        align: 'left'\r\n    },\r\n];\r\nconst raidBuffRequirements = {\r\n    Paladin: 2,\r\n    Druid: 1,\r\n    DemonHunter: 1,\r\n    Monk: 1,\r\n    Priest: 1,\r\n    Mage: 1,\r\n    Evoker: 1,\r\n    Hunter: 1,\r\n    Warrior: 1,\r\n    Rogue: 1,\r\n    Warlock: 1,\r\n};\r\nfunction NameInputComponent() {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [characters, setCharacters] = useState([]);\r\n    const [editIdx, setEditIdx] = useState(null);\r\n    const [editedText, setEditedText] = useState('');\r\n    const api = new API();\r\n    const [expandedId, setExpandedId] = useState(null);\r\n    const [characterCount, setCharacterCount] = useState(0);\r\n    const [missingBuffs, setMissingBuffs] = useState([]);\r\n\r\n\r\n\r\n    function standardizeClassName(className) {\r\n        if (!className) {\r\n            console.warn(\"Encountered undefined className, defaulting to empty string.\");\r\n            return '';  // Return a default or handle it as you see fit\r\n        }\r\n        return className.replace(/\\s+/g, '');\r\n\r\n    }\r\n    function calculateMissingBuffs(characters) {\r\n        const classCounts = {};\r\n\r\n\r\n        Object.keys(raidBuffRequirements).forEach(requiredClass => {\r\n            classCounts[requiredClass] = 0;\r\n        });\r\n\r\n\r\n        characters.forEach(character => {\r\n            const className = standardizeClassName(character.class); // Ensure this is the correct property for class\r\n            if (classCounts.hasOwnProperty(className)) {\r\n                classCounts[className]++;\r\n            }\r\n        });\r\n\r\n\r\n        const missingBuffs = [];\r\n        Object.entries(raidBuffRequirements).forEach(([className, requiredCount]) => {\r\n            const countShort = requiredCount - classCounts[className];\r\n            if (countShort > 0) {\r\n                missingBuffs.push(`Missing ${countShort} ${className}${countShort > 1 ? 's' : ''}`);\r\n            }\r\n        });\r\n\r\n        return missingBuffs;\r\n    }\r\n//useEffect for all characters\r\n    useEffect(() => {\r\n        const fetchCharacters = async () => {\r\n            const response = await api.allCharacters();\r\n\r\n            if (response.data) {\r\n                setCharacters(response.data);\r\n                setCharacterCount(response.data.length);\r\n            }\r\n        };\r\n\r\n        fetchCharacters();  // Initial fetch\r\n        const intervalId = setInterval(fetchCharacters, 5000);  // Fetch every 5000 ms (5 seconds)\r\n\r\n        return () => clearInterval(intervalId);  // Clear interval on component unmount\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (characters.length > 0 && characters.every(char => char.class !== undefined)) {\r\n            const buffs = calculateMissingBuffs(characters);\r\n            setMissingBuffs(buffs);\r\n        } else {\r\n            console.log(\"Waiting for characters data to be fully loaded or verified...\");\r\n        }\r\n    }, [characters]);\r\n    const handleAddName = async () => {\r\n        if (name) {\r\n            try {\r\n                const characterData = await api.insertCharacter(name);\r\n                console.log(characterData);\r\n                if (characterData.error) {\r\n                    throw characterData.error;\r\n                }\r\n                setCharacters([...characters, characterData]);\r\n                setCharacterCount(prev => prev + 1);\r\n                setName('');\r\n                setIsEditing(false);\r\n            } catch (error) {\r\n                console.error('API call failed:', error);\r\n            }\r\n        }\r\n    };\r\n    const handleDelete = async (characterName) => {\r\n        try {\r\n            const encodedName = characterName;\r\n            const response = await api.deleteCharacter(encodedName);\r\n            if (response.status === 200) {\r\n                setCharacters(characters.filter(char => char.name !== characterName));\r\n                setCharacterCount(prev => prev - 1);\r\n            } else {\r\n                throw new Error('Failed to delete character');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting character:', error);\r\n            // Optionally, show an error message to the user\r\n        }\r\n    };\r\n    const handleEdit = (index) => {\r\n        setEditIdx(index);\r\n        setEditedText(characters[index].detail || '');  // Assuming 'detail' is what you want to edit\r\n    };\r\n    const saveEdit = async (index) => {\r\n        const character = characters[index];\r\n        const characterName = character.name;  // Assuming character name is stored under 'name'\r\n        const notes = editedText;  // The text currently in the editable TextField\r\n\r\n        try {\r\n            // Calling the API to update the notes in the backend\r\n            const response = await api.insertNotes(characterName, notes);\r\n            if (response.status === 200) {\r\n                // Update the local state to reflect the changes\r\n                const updatedCharacter = { ...character, detail: notes };\r\n                setCharacters(characters.map((char, i) => i === index ? updatedCharacter : char));\r\n                setEditIdx(null);\r\n                setEditedText('');\r\n            } else {\r\n                // Handle possible errors here, you might want to inform the user\r\n                throw new Error('Failed to update notes');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating notes:', error);\r\n            // Optionally, display an error message to the user\r\n        }\r\n    };\r\n\r\n    const cancelEdit = () => {\r\n        setEditIdx(null);\r\n        setEditedText('');\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            <Typography variant=\"h4\" sx={{ mb: 2 }}>Characters</Typography>\r\n            <Typography variant=\"subtitle1\" sx={{ mb: 2 }}>\r\n                Character Count: {characterCount}/20\r\n            </Typography>\r\n            {missingBuffs.length > 0 && (\r\n                <Box sx={{ mb: 2 }}>\r\n                    {missingBuffs.map((buff, index) => (\r\n                        <Typography key={index} color=\"error\">\r\n                            {buff}\r\n                        </Typography>\r\n                    ))}\r\n                </Box>\r\n            )}\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"characters table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {characterTableAttributes.map((attr) => (\r\n                                <TableCell key={attr.title} align={attr.align}>{attr.title}</TableCell>\r\n                            ))}\r\n                            <TableCell align=\"center\">Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {characters.map((character, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <TableRow>\r\n                                    {characterTableAttributes.map((attr) => (\r\n                                        <TableCell key={attr.title} align={attr.align}>\r\n                                            {attr.attributeDBName === 'imagePath' ? (\r\n                                                <img src={character[attr.attributeDBName]} alt={`Avatar of ${character.name}`} style={{ width: '70px', height: '70px' }} />\r\n                                            ) : (\r\n                                                character[attr.attributeDBName]\r\n                                            )}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                    <TableCell align=\"center\">\r\n                                        <IconButton onClick={() => setExpandedId(expandedId === index ? null : index)}>\r\n                                            {expandedId === index ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n                                        </IconButton>\r\n                                        <IconButton onClick={() => handleEdit(index)}>\r\n                                            <MoreVertIcon />\r\n                                        </IconButton>\r\n                                        <Button variant=\"outlined\" color=\"error\" onClick={() => handleDelete(character.name)}>\r\n                                            Delete\r\n                                        </Button>\r\n                                        {editIdx === index && (\r\n                                            <Box>\r\n                                                <TextField\r\n                                                    value={editedText}\r\n                                                    onChange={(e) => setEditedText(e.target.value)}\r\n                                                    size=\"small\"\r\n                                                />\r\n                                                <Button onClick={() => saveEdit(index)}>Save</Button>\r\n                                                <Button onClick={cancelEdit}>Cancel</Button>\r\n                                            </Box>\r\n                                        )}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                {expandedId === index && (\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={characterTableAttributes.length + 1}>\r\n                                            <Typography variant=\"body2\" style={{ whiteSpace: 'pre-wrap' }}>\r\n                                                {character.notes || 'No notes available'}\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )}\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {isEditing && (\r\n                <TextField\r\n                    label=\"Enter Character Name\"\r\n                    variant=\"outlined\"\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    onBlur={handleAddName}\r\n                    onKeyPress={(e) => e.key === 'Enter' && handleAddName()}\r\n                    fullWidth\r\n                    sx={{ mt: 2 }}\r\n                />\r\n            )}\r\n            <IconButton\r\n                onClick={() => setIsEditing(true)}\r\n                aria-label=\"add character\"\r\n                size=\"large\"\r\n                sx={{ fontSize: '3rem', mt: 2 }}\r\n            >\r\n                <AddIcon sx={{ fontSize: 'inherit' }} />\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default NameInputComponent;","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, InputLabel, MenuItem, FormHelperText, FormControl, Select, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setMakeRaidMode}) {\r\n  const [teamName, setTeamName] = useState(\"\");\r\n  const [numPlayers, setNumPlayers] = useState(\"\");\r\n  const [raidDay_A, setRaidDayA] = useState(\"\");\r\n  const [raidDay_B, setRaidDayB] = useState(\"\");\r\n  const [raidTime, setRaidTime] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [raidCheck, setRaidCheck] = useState(false);\r\n\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Raid Team Called');\r\n    setRaidCheck(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    console.log('Raid Mode called');\r\n    setMakeRaidMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR RAID\r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0) return;\r\n    const api = new API();\r\n    async function checkRaidName() {\r\n        api.checkRaidName(teamName)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkRaidName();\r\n  }, [raidCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0 || numPlayers.length === 0 || raidTime.length === 0) return;\r\n    const api = new API();\r\n    async function createRaidTeam() {\r\n        api.createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Raid Team Created!\");\r\n          setMakeRaidMode(false);\r\n        } else {\r\n          alert(\"Creation NOT Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    createRaidTeam();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Create Raid Team\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"teamName\"\r\n                  label=\"Team Name\"\r\n                  name=\"teamName\"\r\n                  value={teamName}\r\n                  onChange={(n) => setTeamName(n.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"numPlayers\"\r\n                  label=\"Raid Team Size\"\r\n                  name=\"numPlayers\"\r\n                  value={numPlayers}\r\n                  onChange={(p) => setNumPlayers(p.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd1\">Raid Day 1</InputLabel>\r\n                    <Select\r\n                    id=\"rd1\"\r\n                    value={raidDay_A}\r\n                    label=\"Raid Day 1\"\r\n                    onChange={(a) => setRaidDayA(a.target.value)}\r\n                    >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                    <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                    <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                    <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                    <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                    <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                    <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd2\">Raid Day 2</InputLabel>\r\n                        <Select\r\n                        id=\"rd2\"\r\n                        value={raidDay_B}\r\n                        label=\"Raid Day 2\"\r\n                        onChange={(b) => setRaidDayB(b.target.value)}\r\n                        >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n                        <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                        <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                        <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                        <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                        <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                        <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                        <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                        </Select>\r\n                    <FormHelperText>Select 'None' if only 1 raid day</FormHelperText>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"raidTime\"\r\n                  label=\"Time of Raid\"\r\n                  name=\"raidTime\"\r\n                  value={raidTime}\r\n                  onChange={(t) => setRaidTime(t.target.value)}\r\n                />\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Raid Team\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleGoBack} >\r\n                  Already have a Raid Team? Go back\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, {useState, useEffect, Fragment} from 'react';\r\nimport API from '../../API_Interface/API_Interface'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport Box from '@mui/material/Box';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nconst raidteamsTableAttributes = [\r\n    {\r\n        title: 'Raid ID',\r\n        attributeDBName: 'raidTeam_id',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Team Name',\r\n        attributeDBName: 'teamName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Size',\r\n        attributeDBName: 'numPlayers',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Day 1',\r\n        attributeDBName: 'raidDay_A',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Day 2',\r\n        attributeDBName: 'raidDay_B',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Raid Time (PST)',\r\n        attributeDBName: 'raidTime',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Players on Bench',\r\n        attributeDBName: 'numBench',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Trials',\r\n        attributeDBName: 'numTrial',\r\n        align: 'left'\r\n    },\r\n]; \r\n\r\nconst characterTableAttributes = [\r\n    {\r\n        title: '',\r\n        attributeDBName: '',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Image',\r\n        attributeDBName: 'imagePath',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Team Name',\r\n        attributeDBName: 'teamName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Name',\r\n        attributeDBName: 'name',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Role',\r\n        attributeDBName: 'role',\r\n        align:'left'\r\n    },\r\n    {\r\n        title: 'Race',\r\n        attributeDBName: 'race',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Class',\r\n        attributeDBName: 'class',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Item Level',\r\n        attributeDBName: 'gearScore',\r\n        align: 'left'\r\n    },\r\n];\r\n\r\n\r\nexport default function CharacterTable({setMakeRaidMode, setAddCharMode, setOneRaidMode, setRaid}) {\r\n    const [characters, setCharacters] = useState([]);\r\n    const [raidteam, setRaidTeam] = useState([]);\r\n    const [openRows, setOpenRows] = useState([]);\r\n    const [buttonClicked, setButtonClicked] = useState(false); // State to track button click\r\n    const [raidTeam_id, setRaidTeam_id] = useState(null);\r\n    const [deleteMode, setDeleteMode] = useState(false);\r\n    const [removeChar, setRemoveChar] = useState(false);\r\n    const [characterName, setCharacterName] = useState(\"\");\r\n    const [raidTeamName, setRaidTeamName] = useState(\"\");\r\n    const [highlightMode, setHighlightMode] = useState(false);\r\n    const [hoveredIdx, setHoveredIdx] = useState(null);\r\n    const [reloadTable, setReloadTable] = useState(false);\r\n    //ALL TEAMS\r\n\r\n    useEffect(() => {\r\n        const api = new API();\r\n\r\n        async function getRaidTeams() {\r\n            const raidteamsJSONString = await api.allRaidTeams();\r\n            console.log(`raidteams from the DB ${JSON.stringify(raidteamsJSONString)}`);\r\n            setRaidTeam(raidteamsJSONString.data);\r\n        }\r\n        setReloadTable(false);\r\n        getRaidTeams();\r\n    }, [reloadTable]);\r\n\r\n    //DROP DOWN ARROW\r\n    \r\n    useEffect(() => {\r\n        if (buttonClicked) {\r\n            const api = new API();\r\n\r\n            async function getCharacters() {\r\n                const charactersJSONString = await api.charsForRaidTeam(JSON.stringify(raidTeam_id));\r\n                setCharacters(charactersJSONString.data);\r\n                setOpenRows(new Array(charactersJSONString.data.length).fill(false));\r\n            }\r\n    \r\n            getCharacters();\r\n        }\r\n    }, [buttonClicked, raidTeam_id]); // Execute useEffect whenever buttonClicked changes\r\n\r\n    //REMOVE CHARACTER\r\n\r\n    useEffect(() => {\r\n        if (buttonClicked) {\r\n            const api = new API();\r\n\r\n            async function getCharacters() {\r\n                const charactersJSONString = await api.charsForRaidTeam(JSON.stringify(raidTeam_id));\r\n                setCharacters(charactersJSONString.data);\r\n                setOpenRows(new Array(charactersJSONString.data.length).fill(false));\r\n            }\r\n    \r\n            getCharacters();\r\n        }\r\n    }, [removeChar]); // Execute useEffect whenever buttonClicked changes\r\n\r\n    //DELETE TEAM\r\n\r\n    useEffect(() => {\r\n        if (deleteMode) {\r\n            const api = new API();\r\n            async function deleteRaid() {\r\n                try {\r\n                    console.log('here you are');\r\n                    console.log(raidTeam_id);\r\n                    const userInfo = await api.deleteRaid(JSON.stringify(raidTeam_id));\r\n                    console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n                } catch (error) {\r\n                    console.error('Failed to delete raid team:', error);\r\n                }\r\n            }\r\n            \r\n            deleteRaid().then(() => {\r\n                setDeleteMode(false); // Reset deleteMode to prevent repeated deletion\r\n                setReloadTable(true);\r\n            });\r\n        }\r\n    }, [deleteMode, raidTeam_id]);\r\n\r\n\r\n    //HANDLERS\r\n\r\n    const handleRaidClick = (raid) => {\r\n        console.log(raid);\r\n        setRaid(raid);\r\n        setOneRaidMode(true);\r\n    };\r\n\r\n    const handleMouseEnter = (index) => {\r\n        setHoveredIdx(index);  // Set the currently hovered row index\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setHoveredIdx(null);  // Clear the hovered row index\r\n    };\r\n\r\n    const handleRemove = async (name) => {\r\n        setRemoveChar(true);\r\n        setCharacterName(name)\r\n    };\r\n\r\n  \r\n\r\n    const handleRowToggle = (index) => {\r\n        const newOpenRows = [...openRows];\r\n        newOpenRows[index] = !newOpenRows[index];\r\n        setOpenRows(newOpenRows);\r\n    };\r\n\r\n    const handleButtonClick = (raidTeam_id) => {\r\n        setButtonClicked(true); // Set buttonClicked to true when button is clicked\r\n        setRaidTeam_id(raidTeam_id);\r\n    };\r\n\r\n    const handleDelete = (raidteam, event) => {\r\n        event.stopPropagation(); // This stops the event from bubbling up to the parent elements.\r\n        console.log(raidteam.raidTeam_id);\r\n        setRaidTeam_id(raidteam.raidTeam_id); // Assuming you rename setRaidTeam to setRaidTeamId for clarity\r\n        setDeleteMode(true);\r\n        console.log(\"Delete clicked for\", raidteam);\r\n    };\r\n    \r\n    return (\r\n        <Fragment>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6} sm={6}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <Button variant=\"outlined\" color=\"success\" onClick={() => setMakeRaidMode(true)}>\r\n                            Add Raid Team\r\n                            <IconButton\r\n                                aria-label=\"add character\"\r\n                                size=\"large\"\r\n                                color=\"green\"\r\n                                sx={{ fontSize: '2rem', ml: 1 }}\r\n                            >\r\n                                <AddIcon sx={{ fontSize: 'inherit' }} />\r\n                            </IconButton>\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid> \r\n    \r\n            {raidteam.length > 0 && (\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"market table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell></TableCell>\r\n                                {raidteamsTableAttributes.map((attr, idx) => (\r\n                                    <TableCell key={idx} align={attr.align}>\r\n                                        {attr.title}\r\n                                    </TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {raidteam.map((team, idx) => (\r\n                                <Fragment key={idx}>\r\n                                    <TableRow sx={{ backgroundColor: idx === hoveredIdx ? '#CFD8D7' : 'inherit' }}\r\n                                        onMouseEnter={() => handleMouseEnter(idx)}\r\n                                        onMouseLeave={handleMouseLeave}\r\n                                    >\r\n                                        <TableCell>\r\n                                            <IconButton\r\n                                                aria-label=\"expand row\"\r\n                                                size=\"small\"\r\n                                                onClick={(event) => {\r\n                                                    event.stopPropagation();\r\n                                                    handleRowToggle(idx);\r\n                                                    handleButtonClick(raidteam[idx]['raidTeam_id']);\r\n                                                }}\r\n                                            >\r\n                                                {openRows[idx] ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                        {raidteamsTableAttributes.map((attr, idx) => (\r\n                                            <TableCell key={idx} align={attr.align} onClick={() => handleRaidClick(team)}>\r\n                                                {team[attr.attributeDBName]}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                        <TableCell align=\"center\">\r\n                                            <Button variant=\"outlined\" color=\"error\" onClick={(event) => handleDelete(team, event)}>\r\n                                                Delete\r\n                                            </Button>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    {openRows[idx] && (\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={raidteamsTableAttributes.length + 1}>\r\n                                                <TableContainer component={Paper}>\r\n                                                    <Table size=\"small\"> \r\n                                                        <TableHead>\r\n                                                            <TableRow>\r\n                                                                {characterTableAttributes.map((attr, idx) => (\r\n                                                                    <TableCell key={idx} align={attr.align}>\r\n                                                                        {attr.title}\r\n                                                                    </TableCell>\r\n                                                                ))}\r\n                                                            </TableRow>\r\n                                                        </TableHead>\r\n                                                        <TableBody>\r\n                                                         \r\n\r\n                                                            {Array.isArray(characters) && characters.map((character, idx) => (\r\n\r\n                                                                <TableRow key={idx}>\r\n                                                                    {characterTableAttributes.map((attr, idx) => (\r\n                                                                        <TableCell key={idx} align={attr.align}>\r\n                                                                            {character[attr.attributeDBName]}\r\n                                                                        </TableCell>\r\n                                                                    ))}\r\n                                                                    <TableCell align=\"center\">\r\n                                                                        <Button variant=\"outlined\" color=\"error\" onClick={() => handleRemove(character.name)}>\r\n                                                                            Remove\r\n                                                                        </Button>\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            ))}\r\n                                                        </TableBody>\r\n                                                    </Table>\r\n                                                </TableContainer>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n                                </Fragment>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            )}\r\n        </Fragment>\r\n    );\r\n    \r\n    \r\n};\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, InputLabel, MenuItem, FormHelperText, FormControl, Select, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setMakeRaidMode}) {\r\n  const [teamName, setTeamName] = useState(\"\");\r\n  const [numPlayers, setNumPlayers] = useState(\"\");\r\n  const [raidDay_A, setRaidDayA] = useState(\"\");\r\n  const [raidDay_B, setRaidDayB] = useState(\"\");\r\n  const [raidTime, setRaidTime] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [raidCheck, setRaidCheck] = useState(false);\r\n\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Raid Team Called');\r\n    setRaidCheck(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    console.log('Raid Mode called');\r\n    setMakeRaidMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR RAID\r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0) return;\r\n    const api = new API();\r\n    async function checkRaidName() {\r\n        api.checkRaidName(teamName)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkRaidName();\r\n  }, [raidCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0 || numPlayers.length === 0 || raidTime.length === 0) return;\r\n    const api = new API();\r\n    async function createRaidTeam() {\r\n        api.createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Raid Team Created!\");\r\n          setMakeRaidMode(false);\r\n        } else {\r\n          alert(\"Creation NOT Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    createRaidTeam();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Create Raid Team\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"teamName\"\r\n                  label=\"Team Name\"\r\n                  name=\"teamName\"\r\n                  value={teamName}\r\n                  onChange={(n) => setTeamName(n.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"numPlayers\"\r\n                  label=\"Raid Team Size\"\r\n                  name=\"numPlayers\"\r\n                  value={numPlayers}\r\n                  onChange={(p) => setNumPlayers(p.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd1\">Raid Day 1</InputLabel>\r\n                    <Select\r\n                    id=\"rd1\"\r\n                    value={raidDay_A}\r\n                    label=\"Raid Day 1\"\r\n                    onChange={(a) => setRaidDayA(a.target.value)}\r\n                    >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                    <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                    <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                    <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                    <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                    <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                    <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n                <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"raidTime\"\r\n                  label=\"Time of Raid\"\r\n                  name=\"raidTime\"\r\n                  value={raidTime}\r\n                  onChange={(t) => setRaidTime(t.target.value)}\r\n                />\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Raid Team\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleGoBack} >\r\n                  Already have a Raid Team? Go back\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, { Fragment } from 'react';\r\nimport Calendar from '../Calendar/Calendar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add'; // Make sure to import AddIcon\r\nimport Grid from '@mui/material/Grid';\r\nimport { BarChart } from '@mui/x-charts/BarChart';\r\nimport { Divider } from '@mui/material';\r\nimport { PieChart } from '@mui/x-charts/PieChart';\r\n\r\nexport default function OneRaidTeam({ raid }) {\r\n    // Assuming you manage the state of adding a character to the raid\r\n    const [addCharMode, setAddCharMode] = React.useState(false);\r\n\r\n    return (\r\n        <Fragment>\r\n            \r\n            <Grid container spacing={2}>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"div\">\r\n                        Team Name: {raid.teamName} \r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"div\">\r\n                        Raid Days: {raid.raidDay_A} / {raid.raidDay_B} \r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"div\">\r\n                        Raid Time: {raid.raidTime}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"div\">\r\n                        Team Size: {raid.numPlayers}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Divider />\r\n\r\n            <PieChart\r\n                series={[\r\n                    {\r\n                    data: [\r\n                        { id: 0, value: 10, label: 'series A' },\r\n                        { id: 1, value: 15, label: 'series B' },\r\n                        { id: 2, value: 20, label: 'series C' },\r\n                    ],\r\n                    },\r\n                ]}\r\n                width={400}\r\n                height={200}\r\n/>\r\n\r\n\r\n            <BarChart\r\n            series={[\r\n                { data: [35, 44, 24, 34] },\r\n                { data: [51, 6, 49, 30] },\r\n                { data: [15, 25, 30, 50] },\r\n                { data: [60, 50, 15, 25] },\r\n            ]}\r\n            height={290}\r\n            xAxis={[{ data: ['Q1', 'Q2', 'Q3', 'Q4'], scaleType: 'band' }]}\r\n            margin={{ top: 10, bottom: 30, left: 40, right: 10 }}\r\n            />\r\n\r\n\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6} sm={6}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <Button variant=\"outlined\" color=\"success\" onClick={() => setAddCharMode(true)}>\r\n                            Add Character to Raid\r\n                            <IconButton\r\n                                aria-label=\"add character\"\r\n                                size=\"large\"\r\n                                color=\"success\" // Fixed color from 'green' to 'success' to match Button\r\n                                sx={{ fontSize: '2rem', ml: 1 }} // Adjust ml for spacing between Button and IconButton\r\n                            >\r\n                                <AddIcon sx={{ fontSize: 'inherit' }} />\r\n                            </IconButton>\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { Fragment, useState } from 'react';\r\nimport MakeRaidTeam from './MakeRaidTeam';\r\nimport CharsForRaidTeam from './CharsForRaidTeam';\r\nimport AddCharToTeam from './AddCharToTeam';\r\nimport OneRaidTeam from './OneRaidTeam';\r\n\r\nexport default function RaidTeams() {\r\n    \r\n    const [makeRaidMode, setMakeRaidMode] = useState(false);    \r\n    const [addCharMode, setAddCharMode] = useState(false);\r\n    const [raid, setRaid] = useState(undefined);\r\n    const [oneRaidMode, setOneRaidMode] = useState(false);\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {   \r\n                oneRaidMode ? (\r\n               <OneRaidTeam raid={raid} /> \r\n            )\r\n              :  makeRaidMode ? (\r\n                <MakeRaidTeam setMakeRaidMode={setMakeRaidMode} />\r\n            ) : addCharMode ? (\r\n                <AddCharToTeam setAddCharMode={setAddCharMode}/>\r\n            )  :    (\r\n                <CharsForRaidTeam \r\n                    setOneRaidMode={setOneRaidMode} \r\n                    setRaid={setRaid} \r\n                    setMakeRaidMode={setMakeRaidMode} \r\n                    setAddCharMode={setAddCharMode} \r\n                />\r\n            )\r\n        \r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n","import React, {Fragment} from 'react';\nimport Typography from '@mui/material/Typography';\n\nexport default function Summary(props) {\n    return (\n        <Fragment>\n            \n            <Typography component=\"div\" variant='h3'>\n                Summary here\n            </Typography>\n        </Fragment>\n    )\n}\n","import Accounts from '../Components/Accounts/Accounts';\nimport Characters from '../Components/Characters/Characters';\nimport RaidTeams from '../Components/RaidTeams/RaidTeams';\nimport Summary from '../Components/SummaryPage/Summary';\n\nconst presentationComponents = (props) => {\n    return [\n        {\n            title: 'Summary',\n            component: <Summary/>\n        },\n        {\n            title: 'Raid Team',\n            component: <RaidTeams/>\n        },\n        {\n            title: 'Account',\n            component: <Accounts/>\n        },\n        {\n            title: 'Add Character',\n            component: <Characters/>\n        },\n    ];\n};\n\n\nexport {presentationComponents};\n","import React, { Fragment, useState } from \"react\";\nimport { styled, useTheme } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Drawer from \"@mui/material/Drawer\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport MuiAppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport List from \"@mui/material/List\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport {\n  presentationComponents,\n  containerComponents,\n} from \"./MenuPresentationComponents\";\nimport Button from \"@mui/material/Button\";\n\nconst drawerWidth = 240;\n\nconst Main = styled(\"main\", { shouldForwardProp: (prop) => prop !== \"open\" })(\n  ({ theme, open }) => ({\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: `-${drawerWidth}px`,\n    ...(open && {\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    }),\n  })\n);\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== \"open\",\n})(({ theme, open }) => ({\n  transition: theme.transitions.create([\"margin\", \"width\"], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: `${drawerWidth}px`,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n\nconst DrawerHeader = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n  justifyContent: \"flex-end\",\n}));\n\n// Component used to hold the navigation bar\nconst TopBar = ({ open, selectedItem, handleSelectedItem, logoutAction }) => {\n  // This component is responsible for rendering the Toolbar that is drawn\n  // at the top of the drawer.\n\n  return (\n    <Fragment>\n      <AppBar position=\"fixed\" open={false}>\n        <Toolbar>\n          <List>\n            <PresentationListItems\n              selectedItem={selectedItem}\n              onClick={handleSelectedItem}\n              menuItemTitles={presentationComponents().map(\n                (comp) => comp.title\n              )}\n            />\n          </List>\n          <Box width=\"100%\" justifyContent=\"right\" flex={1}>\n            <Typography\n              variant=\"h7\"\n              noWrap\n              component=\"div\"\n              align=\"right\"\n              onClick={() => logoutAction()}\n            >\n              Logout\n            </Typography>\n          </Box>\n        </Toolbar>\n      </AppBar>\n    </Fragment>\n  );\n};\n\nconst PresentationListItems = (props) => {\n  return (\n    <div style={{ display: \"flex\" }}>\n      {props.menuItemTitles.map((title) => (\n        <ListItem\n          button\n          style={{\n            color: props.selectedItem === title ? \"blue\" : \"inherit\",\n            width: \"fit-content\",\n          }}\n          onClick={() => props.onClick(title)}\n          key={title}\n        >\n          <ListItemText primary={title} key={title} />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nconst findSelectedComponent = (selectedItem) => {\n  const component = [...presentationComponents()].filter(\n    (comp) => comp.title === selectedItem\n  );\n  if (component.length === 1) return component[0];\n\n  console.log(\n    \"In findSelectedComponent of MakeEligible. Didn't find the component that corresponds to the menu item.\"\n  );\n  return {\n    title: null,\n    component: null,\n  };\n};\n\nexport default function MainDraswer({ title, user, logoutAction }) {\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(true);\n  const [selectedItem, setSelectedItem] = useState(\"Summary\");\n\n  console.log(\"in MainDrawer\");\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleSelectedItem = (title) => {\n    setSelectedItem(title);\n  };\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <CssBaseline />\n      <TopBar\n        selectedItem={selectedItem}\n        handleSelectedItem={handleSelectedItem}\n        open={open}\n        logoutAction={logoutAction}\n      />\n      // Allow each link to display components\n      <Main open={open}>\n        <DrawerHeader />\n        {findSelectedComponent(selectedItem).component}\n      </Main>\n    </Box>\n  );\n}\n","import { Fragment } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport MainDrawer from \"./menu/MainDrawer\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#fefefe\",\n    },\n  },\n  // Used for fonts\n  typography: {},\n});\n\nconst makeUserName = ({ email, userName }) => {\n  return `${email} ${userName}`;\n};\n\nexport default function App({ user, logoutAction }) {\n  const mainPageTitle = \"WoW-Teamz\";\n\n  return (\n    <ThemeProvider theme={theme}>\n      <MainDrawer\n        title={mainPageTitle}\n        user={makeUserName(user)}\n        logoutAction={logoutAction}\n      />\n    </ThemeProvider>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"./API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setSignupMode, setUser}) {\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [userCheck, setUserCheck] = useState(false);\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Signup Called');\r\n    setUserCheck(true);\r\n    console.log(email);\r\n  };\r\n\r\n  const handleSignin = () => {\r\n    console.log('Signin called');\r\n    setSignupMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR USER\r\n\r\n  useEffect(() => {\r\n    if (email.length === 0) return;\r\n    const api = new API();\r\n    async function checkUserEmail() {\r\n        api.checkUserEmail(email)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkUserEmail();\r\n  }, [userCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (email.length === 0 || userName.length === 0 || password.length === 0) return;\r\n    const api = new API();\r\n    async function insertNewUser() {\r\n        api.insertNewUser(userName, email, password)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        const user = newUserInfo.data.user;\r\n        console.log(\"BELOW IS USER\");\r\n        console.log(user);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Signup Sucessful, Thank you for signing up!\");\r\n          setUser(user);\r\n          setSignupMode(false);\r\n        } else {\r\n          alert(\"Signup Not Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    insertNewUser();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"userName\"\r\n                  label=\"User Name\"\r\n                  name=\"userName\"\r\n                  value={userName}\r\n                  onChange={(u) => setUserName(u.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"new-password\"\r\n                  value={password}\r\n                  onChange={(p) => setPassword(p.target.value)}\r\n                />\r\n              </Grid>\r\n              \r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleSignin} >\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, { Fragment, useState } from 'react';\nimport Login from './Login';\nimport App from './App';\nimport Signup from './Signup';\n\nexport default function Main() {\n    const [user, setUser] = useState(undefined);\n    const [signupMode, setSignupMode] = useState(false);\n\n    const logout = (setUser) => {\n        return () => {\n            setUser(undefined);\n        }\n    };\n\n    \n\n    return (\n        <Fragment>\n            {\n                user !== undefined ? (\n                    <App user={user} logoutAction={logout(setUser)} />\n                ) : (\n                    signupMode ? (\n                        <Signup user={user} setUser={setUser} setSignupMode={setSignupMode}/>\n                    ) : (\n                        <Login user={user} setUser={setUser} setSignupMode={setSignupMode} />\n                    )\n                )\n            }\n        </Fragment>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}