{"version":3,"sources":["API_Interface/API_Interface.js","Login.js","Components/Accounts/Accounts.js","Components/Characters/Characters.js","Components/RaidTeams/MakeRaidTeam.js","Components/RaidTeams/CharsForRaidTeam.js","Components/RaidTeams/AddCharToTeam.js","Components/RaidTeams/OneRaidTeam.js","Components/RaidTeams/RaidTeams.js","Components/SummaryPage/Summary.js","menu/MenuPresentationComponents.js","menu/MainDrawer.js","App.js","Signup.js","Main.js","reportWebVitals.js","index.js"],"names":["axiosAgent","axios","defaults","headers","common","baseURL","withCredentials","APIInterface","getUserInfo","email","password","console","log","JSON","stringify","post","checkUserEmail","get","insertNewUser","userName","insertCharacter","then","response","data","catch","error","character","undefined","allCharacters","deleteCharacter","characterName","delete","encodeURIComponent","insertNotes","notes","allAccounts","accountWithEmail","allRaidTeams","checkRaidName","teamName","createRaidTeam","numPlayers","raidDay_A","raidDay_B","raidTime","addPlayerToRaid","raidteam_id","character_id","charsForRaidTeam","raidTeam_id","deleteRaid","defaultTheme","createTheme","Login","setUser","setSignupMode","setEmail","useState","setPassword","authFailed","setAuthFailed","verifyUser","setVerifyUser","useEffect","api","API","async","userInfo","user","status","ThemeProvider","theme","Grid","container","component","sx","height","CssBaseline","item","xs","sm","md","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","Paper","elevation","square","Box","my","mx","display","flexDirection","alignItems","Avatar","m","bgcolor","Typography","variant","noValidate","mt","TextField","label","fullWidth","value","onChange","e","target","margin","helperText","type","p","FormControlLabel","control","Checkbox","color","Button","mb","onClick","length","marginLeft","accountsTableAttributes","title","attributeDBName","align","NameInputComponent","userInput","setUserInput","accounts","setAccounts","accountsJSONString","getAccounts","TRow","accountObject","TableRow","border","map","attr","idx","TableCell","TableContainer","Table","minWidth","TableHead","TableBody","account","characterTableAttributes","raidBuffRequirements","Paladin","Druid","DemonHunter","Monk","Priest","Mage","Evoker","Hunter","Warrior","Rogue","Warlock","isEditing","setIsEditing","name","setName","characters","setCharacters","editIdx","setEditIdx","editedText","setEditedText","expandedId","setExpandedId","characterCount","setCharacterCount","missingBuffs","setMissingBuffs","calculateMissingBuffs","classCounts","Object","keys","forEach","requiredClass","className","replace","warn","standardizeClassName","class","hasOwnProperty","entries","requiredCount","countShort","push","fetchCharacters","intervalId","setInterval","clearInterval","every","char","buffs","handleAddName","characterData","prev","cancelEdit","buff","index","size","Fragment","src","alt","style","width","IconButton","detail","handleEdit","encodedName","Error","filter","handleDelete","updatedCharacter","i","saveEdit","colSpan","whiteSpace","onBlur","onKeyPress","key","fontSize","SignUp","setMakeRaidMode","setTeamName","setNumPlayers","setRaidDayA","setRaidDayB","setRaidTime","exist","setExist","raidCheck","setRaidCheck","newUserInfo","alert","Container","maxWidth","marginTop","spacing","required","id","n","FormControl","InputLabel","Select","a","MenuItem","b","FormHelperText","t","justifyContent","Link","raidteamsTableAttributes","CharacterTable","setAddCharMode","setOneRaidMode","setRaid","text","setText","displayText","setDisplayText","raidteam","setRaidTeam","openRows","setOpenRows","buttonClicked","setButtonClicked","setRaidTeam_id","deleteMode","setDeleteMode","removeChar","setRemoveChar","setCharacterName","raidTeamName","setRaidTeamName","highlightMode","setHighlightMode","hoveredIdx","setHoveredIdx","reloadTable","setReloadTable","raidteamsJSONString","getRaidTeams","getCharacters","charactersJSONString","Array","fill","handleMouseLeave","handleInputChange","event","handleSubmit","ml","team","backgroundColor","onMouseEnter","onMouseLeave","stopPropagation","newOpenRows","handleRowToggle","handleButtonClick","handleRaidClick","raid","multiline","maxRows","placeholder","isArray","handleRemove","OneRaidTeam","addCharMode","React","Divider","PieChart","series","BarChart","xAxis","scaleType","top","bottom","left","right","RaidTeams","makeRaidMode","oneRaidMode","Summary","props","presentationComponents","Characters","Main","styled","shouldForwardProp","prop","open","flexGrow","padding","transition","transitions","create","easing","sharp","duration","leavingScreen","easeOut","enteringScreen","AppBar","MuiAppBar","DrawerHeader","mixins","toolbar","TopBar","selectedItem","handleSelectedItem","logoutAction","position","Toolbar","List","PresentationListItems","menuItemTitles","comp","flex","noWrap","ListItem","button","ListItemText","primary","findSelectedComponent","MainDraswer","useTheme","setOpen","setSelectedItem","palette","main","typography","makeUserName","App","setUserName","userCheck","setUserCheck","u","autoComplete","signupMode","logout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53fece2e.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst AxiosConfigured = () => {\n    // Indicate to the API that all requests for this app are AJAX\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n    // Set the baseURL for all requests to the API domain instead of the current domain\n    // axios.defaults.baseURL = `http://localhost:8443/api/v1`;\n    axios.defaults.baseURL = `http://localhost:8443/api/v1`;\n\n\n    // Allow the browser to send cookies to the API domain (which include auth_token)\n    axios.defaults.withCredentials = true;\n\n\n//    axios.defaults.headers.common['X-CSRF-TOKEN'] = csrf_token;\n\n    return axios;\n};\n\n\nconst axiosAgent = AxiosConfigured();\n\nexport default class APIInterface {\n\n    //Login\n\n    async getUserInfo(email, password) {\n        console.log(JSON.stringify(email));\n        console.log(JSON.stringify(password));\n        return axiosAgent.post(`/login/`, {email, password});\n    }\n\n    //Signup\n\n    async checkUserEmail(email) {\n        return axiosAgent.get(`/signup/${email}`);\n    }\n\n    async insertNewUser(userName, email, password) {\n        console.log(JSON.stringify(email));\n        console.log(JSON.stringify(password));\n        return axiosAgent.post(`/signup/`, {email, password, userName});\n    }\n\n    //Characters\n\n    async insertCharacter(userName) {\n        return axiosAgent.post(`/characters/insert`, { userName })\n            .then(response => response.data)\n            .catch(error => ({\n                error,\n                character: undefined\n            }));\n    }\n    async allCharacters() {\n        return axiosAgent.get(`characters/all-characters`);\n\n    }\n\n    async deleteCharacter(characterName) {\n        return axios.delete(`/characters/delete/${encodeURIComponent(characterName)}`);\n    }\n    \n    async insertNotes(characterName, notes) {\n        return axios.post(`/characters/insert-notes/${encodeURIComponent(characterName)}`, { notes });\n    }\n\n    //Accounts\n\n    async allAccounts() {\n        return axiosAgent.get(`accounts/all-accounts`);\n    }\n\n    async accountWithEmail(email) {\n        return axiosAgent.get(`accounts/${email}`);\n    }\n\n\n    //Raid Teams\n\n    async allRaidTeams() {\n        return axiosAgent.get(`raidteams/all-raidteams`);\n    }\n\n    async checkRaidName(teamName) {\n        return axiosAgent.get(`/raidteams/${teamName}`);\n    }\n\n    async createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime) {\n        return axiosAgent.post(`/raidteams/`, {teamName, numPlayers, raidDay_A, raidDay_B, raidTime});\n    }\n\n    async addPlayerToRaid(raidteam_id, character_id) {\n        return axiosAgent.get(`raidteams/${raidteam_id}/${character_id}`);\n    }\n\n    async charsForRaidTeam(raidTeam_id) {\n        return axiosAgent.get(`/raidteams/${raidTeam_id}/chars-for-raidteam`);\n    }\n\n    async deleteRaid(raidTeam_id) {\n        return axios.delete(`/raidteams/delete/${raidTeam_id}`);\n    }\n\n}","import React, { useState, useEffect } from \"react\";\nimport API from \"./API_Interface/API_Interface\";\nimport {\n  Avatar, Box, Button, Checkbox, CssBaseline, Divider, FormControlLabel,\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\n} from \"@mui/material\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\n\nconst defaultTheme = createTheme();\n\nexport default function Login({ setUser, setSignupMode}) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [authFailed, setAuthFailed] = useState(false);\n  const [verifyUser, setVerifyUser] = useState(false);\n  //const [newUser, setNewUser] = useState(false);\n \n  const handleLogin = () => {\n    console.log(\"handleLogin called.\");\n    if (email.length === 0 || password.length === 0) {\n      setAuthFailed(true);\n    } else {\n      setAuthFailed(false);\n      setVerifyUser(true);  // Move user verification flag here\n    }\n  };\n\n  const handleSignup = () => {\n    console.log(\"handleSignup called.\");\n    setSignupMode(true); // Toggle signup mode to true\n  };\n\n\n  useEffect(() => {\n    if (!verifyUser) return;\n\n    const api = new API();\n    async function getUserInfo() {\n        api.getUserInfo(email, password)\n        .then( userInfo => {\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo)}`);\n        const user = userInfo.data.user;\n        console.log(\"BELOW IS USER\");\n        console.log(user);\n        if (userInfo.data.status === \"OK\") {\n          console.log(\"SETTING USER to USER\");\n          setUser(user);\n        } else {\n          setVerifyUser(false);\n          setAuthFailed(true);\n        }\n      });\n    }\n    getUserInfo();\n  }, [verifyUser, email, password, setUser]); // Ensure dependencies are correctly listed\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <Grid container component=\"main\" sx={{ height: \"100vh\" }}>\n        <CssBaseline />\n        <Grid item xs={false} sm={4} md={7} sx={{\n          backgroundImage: \"url(https://wallpapers.com/images/hd/world-of-warcraft-restoration-druid-healing-69ucodb01a3oyfab.webp)\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n        }} />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box sx={{ \n            my: 8, mx: 4, display: \"flex\", flexDirection: \"column\", alignItems: \"center\"\n          }}>\n            <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Sign in\n            </Typography>\n            <Box component=\"form\" noValidate sx={{ mt: 1}}>\n              <TextField\n                error={authFailed}\n                label=\"Email\"\n                fullWidth\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                margin=\"normal\"\n                helperText={authFailed ? \"Invalid email or password\" : \"\"}\n              />\n              <TextField\n                error={authFailed}\n                label=\"Password\"\n                type=\"password\"\n                fullWidth\n                value={password}\n                onChange={(p) => setPassword(p.target.value)}\n                margin=\"normal\"\n                helperText={authFailed ? \"Invalid email or password\" : \"\"}\n              />\n              <FormControlLabel\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                label=\"Remember me\"\n              />\n              <Button\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n                onClick={handleLogin}\n              >\n                Sign In\n              </Button>\n              \n                \n                <Button\n                  variant=\"contained\"\n                  sx={{ mt: 3, mb: 2, marginLeft: 1 }} // Added marginLeft to create space between the Typography and Button\n                  onClick={handleSignup}\n                >\n                  Sign up here\n                </Button>\n              \n\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n}\n","import React, {useState, useEffect, Fragment} from 'react';\r\nimport API from '../../API_Interface/API_Interface'\r\n\r\n\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\n//import TextField from '@mui/material/TextField';\r\n//import Button from '@mui/material/Button';\r\n//import Box from '@mui/material/Box';\r\n//import Divider from '@mui/material/Divider';\r\n//import Avatar from '@mui/material/Avatar';\r\n//import CssBaseline from '@mui/material/CssBaseline';\r\n//import FormControlLabel from '@mui/material/FormControlLabel';\r\n//import Checkbox from '@mui/material/Checkbox';\r\n//import Link from '@mui/material/Link';\r\n//import Grid from '@mui/material/Grid';\r\n//import LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\n//import { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\n\r\n\r\nconst accountsTableAttributes = [\r\n    {\r\n        title: 'Email',\r\n        attributeDBName: 'email',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'User Name',\r\n        attributeDBName: 'userName',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Account ID',\r\n        attributeDBName: 'account_id',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Role',\r\n        attributeDBName: 'role',\r\n        align: 'left'\r\n    },\r\n]; \r\n\r\nexport default function NameInputComponent() {\r\n\r\n//START display of characters in database\r\n\r\n    const [userInput, setUserInput] = useState('');\r\n    const [verifyUser, setVerifyUser] = useState(false);\r\n    const [authFailed, setAuthFailed] = useState(false);\r\n    const [user, setUser] = useState(undefined);\r\n\r\n    const handleInputChange = event => {\r\n        console.log(\"handleInputChange called.\");\r\n\r\n        setUserInput(event.target.value);\r\n        setAuthFailed(false);\r\n\r\n        if(event.key === \"Sign In\") {\r\n            console.log(\"handleKeyPress: Verify user input.\");\r\n            setVerifyUser(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n \r\n        if( ! verifyUser || userInput.length === 0)\r\n            return;\r\n\r\n        const api = new API();\r\n        async function getUserInfo() {\r\n            api.getUserInfo(userInput)\r\n                .then( userInfo => {\r\n                console.log(`api returns user info and it is: ${JSON.stringify(userInfo)}`);\r\n                const user = userInfo.user;\r\n                if( userInfo.status === \"OK\" ) {\r\n                    setUser(user);\r\n                } else  {\r\n                    setVerifyUser(false);\r\n                    setAuthFailed(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        getUserInfo();\r\n    }, [verifyUser, setUser, userInput]);\r\n\r\n    const [accounts, setAccounts] = useState([]);\r\n    console.log(`in AccountTable accounts contains is ${JSON.stringify(accounts)}`);\r\n\r\n\r\n    useEffect(() => {\r\n        const api = new API();\r\n\r\n        async function getAccounts() {\r\n            const accountsJSONString = await api.allAccounts();\r\n            console.log(`accounts from the DB ${JSON.stringify(accountsJSONString)}`);\r\n            setAccounts(accountsJSONString.data);\r\n        }\r\n\r\n        getAccounts();\r\n    }, []);\r\n    \r\n    const TRow = ({accountObject, onClick}) => {\r\n        return <TableRow\r\n            sx={{'&:last-child td, &:last-child th': {border: 0}}}\r\n        >\r\n            {\r\n                accountsTableAttributes.map((attr, idx) =>\r\n                    <TableCell key={idx} onClick={() => onClick(accountObject)}\r\n                               align={attr.align}>\r\n                        {\r\n                            accountObject[attr.attributeDBName]\r\n                        }\r\n                    </TableCell>)\r\n            }\r\n        </TableRow>\r\n    }\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n            Here is a list of all your characters that reside in your account.\r\n            </Typography> \r\n        {\r\n            accounts.length > 0 &&\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{minWidth: 650}} aria-label=\"account table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {\r\n                                    accountsTableAttributes.map((attr, idx) =>\r\n                                        <TableCell  key={idx}\r\n                                                    align={attr.align}>\r\n                                            {attr.title}\r\n                                        </TableCell>)\r\n                                }\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                accounts.map((account, idx) => (\r\n                                    <TRow accountObject={account} key={idx}/>\r\n                                ))\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n        }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport API from '../../API_Interface/API_Interface'; // Ensure this path is correct\r\nimport { Box, TextField, IconButton, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\nconst characterTableAttributes = [\r\n    {\r\n        title: 'Image',\r\n        attributeDBName: 'imagePath',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Name',\r\n        attributeDBName: 'name',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Race',\r\n        attributeDBName: 'race',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Class',\r\n        attributeDBName: 'class',\r\n        align: 'left'\r\n    },\r\n    {\r\n        title: 'Item Level',\r\n        attributeDBName: 'gearScore',\r\n        align: 'left'\r\n    },\r\n];\r\nconst raidBuffRequirements = {\r\n    Paladin: 2,\r\n    Druid: 1,\r\n    DemonHunter: 1,\r\n    Monk: 1,\r\n    Priest: 1,\r\n    Mage: 1,\r\n    Evoker: 1,\r\n    Hunter: 1,\r\n    Warrior: 1,\r\n    Rogue: 1,\r\n    Warlock: 1,\r\n};\r\nfunction NameInputComponent() {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [characters, setCharacters] = useState([]);\r\n    const [editIdx, setEditIdx] = useState(null);\r\n    const [editedText, setEditedText] = useState('');\r\n    const api = new API();\r\n    const [expandedId, setExpandedId] = useState(null);\r\n    const [characterCount, setCharacterCount] = useState(0);\r\n    const [missingBuffs, setMissingBuffs] = useState([]);\r\n\r\n\r\n\r\n    function standardizeClassName(className) {\r\n        if (!className) {\r\n            console.warn(\"Encountered undefined className, defaulting to empty string.\");\r\n            return '';  // Return a default or handle it as you see fit\r\n        }\r\n        return className.replace(/\\s+/g, '');\r\n\r\n    }\r\n    function calculateMissingBuffs(characters) {\r\n        const classCounts = {};\r\n\r\n\r\n        Object.keys(raidBuffRequirements).forEach(requiredClass => {\r\n            classCounts[requiredClass] = 0;\r\n        });\r\n\r\n\r\n        characters.forEach(character => {\r\n            const className = standardizeClassName(character.class); // Ensure this is the correct property for class\r\n            if (classCounts.hasOwnProperty(className)) {\r\n                classCounts[className]++;\r\n            }\r\n        });\r\n\r\n\r\n        const missingBuffs = [];\r\n        Object.entries(raidBuffRequirements).forEach(([className, requiredCount]) => {\r\n            const countShort = requiredCount - classCounts[className];\r\n            if (countShort > 0) {\r\n                missingBuffs.push(`Missing ${countShort} ${className}${countShort > 1 ? 's' : ''}`);\r\n            }\r\n        });\r\n\r\n        return missingBuffs;\r\n    }\r\n//useEffect for all characters\r\n    useEffect(() => {\r\n        const fetchCharacters = async () => {\r\n            const response = await api.allCharacters();\r\n\r\n            if (response.data) {\r\n                setCharacters(response.data);\r\n                setCharacterCount(response.data.length);\r\n            }\r\n        };\r\n\r\n        fetchCharacters();  // Initial fetch\r\n        const intervalId = setInterval(fetchCharacters, 5000);  // Fetch every 5000 ms (5 seconds)\r\n\r\n        return () => clearInterval(intervalId);  // Clear interval on component unmount\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (characters.length > 0 && characters.every(char => char.class !== undefined)) {\r\n            const buffs = calculateMissingBuffs(characters);\r\n            setMissingBuffs(buffs);\r\n        } else {\r\n            console.log(\"Waiting for characters data to be fully loaded or verified...\");\r\n        }\r\n    }, [characters]);\r\n    const handleAddName = async () => {\r\n        if (name) {\r\n            try {\r\n                const characterData = await api.insertCharacter(name);\r\n                console.log(characterData);\r\n                if (characterData.error) {\r\n                    throw characterData.error;\r\n                }\r\n                setCharacters([...characters, characterData]);\r\n                setCharacterCount(prev => prev + 1);\r\n                setName('');\r\n                setIsEditing(false);\r\n            } catch (error) {\r\n                console.error('API call failed:', error);\r\n            }\r\n        }\r\n    };\r\n    const handleDelete = async (characterName) => {\r\n        try {\r\n            const encodedName = characterName;\r\n            const response = await api.deleteCharacter(encodedName);\r\n            if (response.status === 200) {\r\n                setCharacters(characters.filter(char => char.name !== characterName));\r\n                setCharacterCount(prev => prev - 1);\r\n            } else {\r\n                throw new Error('Failed to delete character');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting character:', error);\r\n            // Optionally, show an error message to the user\r\n        }\r\n    };\r\n    const handleEdit = (index) => {\r\n        setEditIdx(index);\r\n        setEditedText(characters[index].detail || '');  // Assuming 'detail' is what you want to edit\r\n    };\r\n    const saveEdit = async (index) => {\r\n        const character = characters[index];\r\n        const characterName = character.name;  // Assuming character name is stored under 'name'\r\n        const notes = editedText;  // The text currently in the editable TextField\r\n\r\n        try {\r\n            // Calling the API to update the notes in the backend\r\n            const response = await api.insertNotes(characterName, notes);\r\n            if (response.status === 200) {\r\n                // Update the local state to reflect the changes\r\n                const updatedCharacter = { ...character, detail: notes };\r\n                setCharacters(characters.map((char, i) => i === index ? updatedCharacter : char));\r\n                setEditIdx(null);\r\n                setEditedText('');\r\n            } else {\r\n                // Handle possible errors here, you might want to inform the user\r\n                throw new Error('Failed to update notes');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating notes:', error);\r\n            // Optionally, display an error message to the user\r\n        }\r\n    };\r\n\r\n    const cancelEdit = () => {\r\n        setEditIdx(null);\r\n        setEditedText('');\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            <Typography variant=\"h4\" sx={{ mb: 2 }}>Characters</Typography>\r\n            <Typography variant=\"subtitle1\" sx={{ mb: 2 }}>\r\n                Character Count: {characterCount}/20\r\n            </Typography>\r\n            {missingBuffs.length > 0 && (\r\n                <Box sx={{ mb: 2 }}>\r\n                    {missingBuffs.map((buff, index) => (\r\n                        <Typography key={index} color=\"error\">\r\n                            {buff}\r\n                        </Typography>\r\n                    ))}\r\n                </Box>\r\n            )}\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"characters table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {characterTableAttributes.map((attr) => (\r\n                                <TableCell key={attr.title} align={attr.align}>{attr.title}</TableCell>\r\n                            ))}\r\n                            <TableCell align=\"center\">Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {characters.map((character, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <TableRow>\r\n                                    {characterTableAttributes.map((attr) => (\r\n                                        <TableCell key={attr.title} align={attr.align}>\r\n                                            {attr.attributeDBName === 'imagePath' ? (\r\n                                                <img src={character[attr.attributeDBName]} alt={`Avatar of ${character.name}`} style={{ width: '70px', height: '70px' }} />\r\n                                            ) : (\r\n                                                character[attr.attributeDBName]\r\n                                            )}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                    <TableCell align=\"center\">\r\n                                        <IconButton onClick={() => setExpandedId(expandedId === index ? null : index)}>\r\n                                            {expandedId === index ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n                                        </IconButton>\r\n                                        <IconButton onClick={() => handleEdit(index)}>\r\n                                            <MoreVertIcon />\r\n                                        </IconButton>\r\n                                        <Button variant=\"outlined\" color=\"error\" onClick={() => handleDelete(character.name)}>\r\n                                            Delete\r\n                                        </Button>\r\n                                        {editIdx === index && (\r\n                                            <Box>\r\n                                                <TextField\r\n                                                    value={editedText}\r\n                                                    onChange={(e) => setEditedText(e.target.value)}\r\n                                                    size=\"small\"\r\n                                                />\r\n                                                <Button onClick={() => saveEdit(index)}>Save</Button>\r\n                                                <Button onClick={cancelEdit}>Cancel</Button>\r\n                                            </Box>\r\n                                        )}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                {expandedId === index && (\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={characterTableAttributes.length + 1}>\r\n                                            <Typography variant=\"body2\" style={{ whiteSpace: 'pre-wrap' }}>\r\n                                                {character.notes || 'No notes available'}\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )}\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n            {isEditing && (\r\n                <TextField\r\n                    label=\"Enter Character Name\"\r\n                    variant=\"outlined\"\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    onBlur={handleAddName}\r\n                    onKeyPress={(e) => e.key === 'Enter' && handleAddName()}\r\n                    fullWidth\r\n                    sx={{ mt: 2 }}\r\n                />\r\n            )}\r\n            <IconButton\r\n                onClick={() => setIsEditing(true)}\r\n                aria-label=\"add character\"\r\n                size=\"large\"\r\n                sx={{ fontSize: '3rem', mt: 2 }}\r\n            >\r\n                <AddIcon sx={{ fontSize: 'inherit' }} />\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default NameInputComponent;","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, InputLabel, MenuItem, FormHelperText, FormControl, Select, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setMakeRaidMode}) {\r\n  const [teamName, setTeamName] = useState(\"\");\r\n  const [numPlayers, setNumPlayers] = useState(\"\");\r\n  const [raidDay_A, setRaidDayA] = useState(\"\");\r\n  const [raidDay_B, setRaidDayB] = useState(\"\");\r\n  const [raidTime, setRaidTime] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [raidCheck, setRaidCheck] = useState(false);\r\n\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Raid Team Called');\r\n    setRaidCheck(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    console.log('Raid Mode called');\r\n    setMakeRaidMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR RAID\r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0) return;\r\n    const api = new API();\r\n    async function checkRaidName() {\r\n        api.checkRaidName(teamName)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkRaidName();\r\n  }, [raidCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0 || numPlayers.length === 0 || raidTime.length === 0) return;\r\n    const api = new API();\r\n    async function createRaidTeam() {\r\n        api.createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Raid Team Created!\");\r\n          setMakeRaidMode(false);\r\n        } else {\r\n          alert(\"Creation NOT Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    createRaidTeam();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Create Raid Team\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"teamName\"\r\n                  label=\"Team Name\"\r\n                  name=\"teamName\"\r\n                  value={teamName}\r\n                  onChange={(n) => setTeamName(n.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"numPlayers\"\r\n                  label=\"Raid Team Size\"\r\n                  name=\"numPlayers\"\r\n                  value={numPlayers}\r\n                  onChange={(p) => setNumPlayers(p.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd1\">Raid Day 1</InputLabel>\r\n                    <Select\r\n                    id=\"rd1\"\r\n                    value={raidDay_A}\r\n                    label=\"Raid Day 1\"\r\n                    onChange={(a) => setRaidDayA(a.target.value)}\r\n                    >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                    <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                    <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                    <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                    <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                    <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                    <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd2\">Raid Day 2</InputLabel>\r\n                        <Select\r\n                        id=\"rd2\"\r\n                        value={raidDay_B}\r\n                        label=\"Raid Day 2\"\r\n                        onChange={(b) => setRaidDayB(b.target.value)}\r\n                        >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n                        <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                        <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                        <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                        <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                        <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                        <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                        <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                        </Select>\r\n                    <FormHelperText>Select 'None' if only 1 raid day</FormHelperText>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"raidTime\"\r\n                  label=\"Time of Raid\"\r\n                  name=\"raidTime\"\r\n                  value={raidTime}\r\n                  onChange={(t) => setRaidTime(t.target.value)}\r\n                />\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Raid Team\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleGoBack} >\r\n                  Already have a Raid Team? Go back\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport API from \"../../API_Interface/API_Interface\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Collapse from \"@mui/material/Collapse\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nconst raidteamsTableAttributes = [\r\n  {\r\n    title: \"Raid ID\",\r\n    attributeDBName: \"raidTeam_id\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Team Name\",\r\n    attributeDBName: \"teamName\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Raid Size\",\r\n    attributeDBName: \"numPlayers\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Raid Day 1\",\r\n    attributeDBName: \"raidDay_A\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Raid Day 2\",\r\n    attributeDBName: \"raidDay_B\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Raid Time (PST)\",\r\n    attributeDBName: \"raidTime\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Players on Bench\",\r\n    attributeDBName: \"numBench\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Trials\",\r\n    attributeDBName: \"numTrial\",\r\n    align: \"left\",\r\n  },\r\n];\r\n\r\nconst characterTableAttributes = [\r\n  {\r\n    title: \"\",\r\n    attributeDBName: \"\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Image\",\r\n    attributeDBName: \"imagePath\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Team Name\",\r\n    attributeDBName: \"teamName\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Name\",\r\n    attributeDBName: \"name\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Role\",\r\n    attributeDBName: \"role\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Race\",\r\n    attributeDBName: \"race\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Class\",\r\n    attributeDBName: \"class\",\r\n    align: \"left\",\r\n  },\r\n  {\r\n    title: \"Item Level\",\r\n    attributeDBName: \"gearScore\",\r\n    align: \"left\",\r\n  },\r\n];\r\n\r\nexport default function CharacterTable({\r\n  setMakeRaidMode,\r\n  setAddCharMode,\r\n  setOneRaidMode,\r\n  setRaid,\r\n}) {\r\n  const [text, setText] = useState(\"\");\r\n  const [displayText, setDisplayText] = useState(\"\");\r\n  const [characters, setCharacters] = useState([]);\r\n  const [raidteam, setRaidTeam] = useState([]);\r\n  const [openRows, setOpenRows] = useState([]);\r\n  const [buttonClicked, setButtonClicked] = useState(false); // State to track button click\r\n  const [raidTeam_id, setRaidTeam_id] = useState(null);\r\n  const [deleteMode, setDeleteMode] = useState(false);\r\n  const [removeChar, setRemoveChar] = useState(false);\r\n  const [characterName, setCharacterName] = useState(\"\");\r\n  const [raidTeamName, setRaidTeamName] = useState(\"\");\r\n  const [highlightMode, setHighlightMode] = useState(false);\r\n  const [hoveredIdx, setHoveredIdx] = useState(null);\r\n  const [reloadTable, setReloadTable] = useState(false);\r\n  //ALL TEAMS\r\n\r\n  useEffect(() => {\r\n    const api = new API();\r\n\r\n    async function getRaidTeams() {\r\n      const raidteamsJSONString = await api.allRaidTeams();\r\n      console.log(\r\n        `raidteams from the DB ${JSON.stringify(raidteamsJSONString)}`\r\n      );\r\n      setRaidTeam(raidteamsJSONString.data);\r\n    }\r\n    setReloadTable(false);\r\n    getRaidTeams();\r\n  }, [reloadTable]);\r\n\r\n  //DROP DOWN ARROW\r\n\r\n  useEffect(() => {\r\n    if (buttonClicked) {\r\n      const api = new API();\r\n\r\n      async function getCharacters() {\r\n        const charactersJSONString = await api.charsForRaidTeam(\r\n          JSON.stringify(raidTeam_id)\r\n        );\r\n        setCharacters(charactersJSONString.data);\r\n        setOpenRows(new Array(charactersJSONString.data.length).fill(false));\r\n      }\r\n\r\n      getCharacters();\r\n    }\r\n  }, [buttonClicked, raidTeam_id]); // Execute useEffect whenever buttonClicked changes\r\n\r\n  //REMOVE CHARACTER\r\n\r\n  useEffect(() => {\r\n    if (buttonClicked) {\r\n      const api = new API();\r\n\r\n      async function getCharacters() {\r\n        const charactersJSONString = await api.charsForRaidTeam(\r\n          JSON.stringify(raidTeam_id)\r\n        );\r\n        setCharacters(charactersJSONString.data);\r\n        setOpenRows(new Array(charactersJSONString.data.length).fill(false));\r\n      }\r\n\r\n      getCharacters();\r\n    }\r\n  }, [removeChar]); // Execute useEffect whenever buttonClicked changes\r\n\r\n  //DELETE TEAM\r\n\r\n  useEffect(() => {\r\n    if (deleteMode) {\r\n      const api = new API();\r\n      async function deleteRaid() {\r\n        try {\r\n          console.log(\"here you are\");\r\n          console.log(raidTeam_id);\r\n          const userInfo = await api.deleteRaid(JSON.stringify(raidTeam_id));\r\n          console.log(\r\n            `API returns user info and it is: ${JSON.stringify(\r\n              userInfo.data.user\r\n            )}`\r\n          );\r\n        } catch (error) {\r\n          console.error(\"Failed to delete raid team:\", error);\r\n        }\r\n      }\r\n\r\n      deleteRaid().then(() => {\r\n        setDeleteMode(false); // Reset deleteMode to prevent repeated deletion\r\n        setReloadTable(true);\r\n      });\r\n    }\r\n  }, [deleteMode, raidTeam_id]);\r\n\r\n  //HANDLERS\r\n\r\n  const handleRaidClick = (raid) => {\r\n    console.log(raid);\r\n    setRaid(raid);\r\n    setOneRaidMode(true);\r\n  };\r\n\r\n  const handleMouseEnter = (index) => {\r\n    setHoveredIdx(index); // Set the currently hovered row index\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredIdx(null); // Clear the hovered row index\r\n  };\r\n\r\n  const handleRemove = async (name) => {\r\n    setRemoveChar(true);\r\n    setCharacterName(name);\r\n  };\r\n\r\n  const handleRowToggle = (index) => {\r\n    const newOpenRows = [...openRows];\r\n    newOpenRows[index] = !newOpenRows[index];\r\n    setOpenRows(newOpenRows);\r\n  };\r\n\r\n  const handleButtonClick = (raidTeam_id) => {\r\n    setButtonClicked(true); // Set buttonClicked to true when button is clicked\r\n    setRaidTeam_id(raidTeam_id);\r\n  };\r\n\r\n  const handleDelete = (raidteam, event) => {\r\n    event.stopPropagation(); // This stops the event from bubbling up to the parent elements.\r\n    console.log(raidteam.raidTeam_id);\r\n    setRaidTeam_id(raidteam.raidTeam_id); // Assuming you rename setRaidTeam to setRaidTeamId for clarity\r\n    setDeleteMode(true);\r\n    console.log(\"Delete clicked for\", raidteam);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    setDisplayText(text);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={6} sm={6}>\r\n          <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"success\"\r\n              onClick={() => setMakeRaidMode(true)}\r\n            >\r\n              Add Raid Team\r\n              <IconButton\r\n                aria-label=\"add character\"\r\n                size=\"large\"\r\n                color=\"green\"\r\n                sx={{ fontSize: \"2rem\", ml: 1 }}\r\n              >\r\n                <AddIcon sx={{ fontSize: \"inherit\" }} />\r\n              </IconButton>\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {raidteam.length > 0 && (\r\n        <TableContainer component={Paper}>\r\n          <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"market table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell></TableCell>\r\n\r\n                {raidteamsTableAttributes.map((attr, idx) => (\r\n                  <TableCell key={idx} align={attr.align}>\r\n                    {attr.title}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {raidteam.map((team, idx) => (\r\n                <Fragment key={idx}>\r\n                  <TableRow\r\n                    sx={{\r\n                      backgroundColor:\r\n                        idx === hoveredIdx ? \"#CFD8D7\" : \"inherit\",\r\n                    }}\r\n                    onMouseEnter={() => handleMouseEnter(idx)}\r\n                    onMouseLeave={handleMouseLeave}\r\n                  >\r\n                    <TableCell>\r\n                      <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={(event) => {\r\n                          event.stopPropagation();\r\n                          handleRowToggle(idx);\r\n                          handleButtonClick(raidteam[idx][\"raidTeam_id\"]);\r\n                        }}\r\n                      >\r\n                        {openRows[idx] ? (\r\n                          <KeyboardArrowUpIcon />\r\n                        ) : (\r\n                          <KeyboardArrowDownIcon />\r\n                        )}\r\n                      </IconButton>\r\n                    </TableCell>\r\n                    {raidteamsTableAttributes.map((attr, idx) => (\r\n                      <TableCell\r\n                        key={idx}\r\n                        align={attr.align}\r\n                        onClick={() => handleRaidClick(team)}\r\n                      >\r\n                        {team[attr.attributeDBName]}\r\n                      </TableCell>\r\n                    ))}\r\n                    <TableCell align=\"center\">\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color=\"error\"\r\n                        onClick={(event) => handleDelete(team, event)}\r\n                      >\r\n                        Delete\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n\r\n                  {openRows[idx] && (\r\n                    <>\r\n                      <TableRow>\r\n                        <TableCell\r\n                          colSpan={raidteamsTableAttributes.length + 1}\r\n                        >\r\n                          <div className=\"\">\r\n                            <TextField\r\n                              style={{ width: \"50%\" }}\r\n                              name=\"message\"\r\n                              multiline\r\n                              maxRows={3}\r\n                              placeholder=\"Enter text here..\"\r\n                              variant=\"outlined\"\r\n                              value={text}\r\n                              onChange={handleInputChange}\r\n                            />\r\n                          </div>\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              justifyContent: \"end\",\r\n                              width: \"100%\",\r\n                            }}\r\n                          >\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"success\"\r\n                              onClick={handleSubmit}\r\n                            >\r\n                              Submit\r\n                            </Button>\r\n                          </div>\r\n\r\n                          <div>\r\n                            <p>{displayText}</p>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                      <TableRow>\r\n                        {/* <div>\r\n                          <div>\r\n                            <textarea\r\n                              style={{ width: \"100%\" }}\r\n                              name=\"message\"\r\n                              rows=\"3\"\r\n                              cols=\"20\"\r\n                              value={text}\r\n                              onChange={handleInputChange}\r\n                            />\r\n                          </div>\r\n                          <div>\r\n                            <button onClick={handleSubmit}>Submit</button>\r\n                          </div>\r\n                          <div>\r\n                            <p>{displayText}</p>\r\n                          </div>\r\n                        </div> */}\r\n\r\n                        <TableCell\r\n                          colSpan={raidteamsTableAttributes.length + 1}\r\n                        >\r\n                          <TableContainer component={Paper}>\r\n                            <Table size=\"small\">\r\n                              <TableHead>\r\n                                <TableRow>\r\n                                  {characterTableAttributes.map((attr, idx) => (\r\n                                    <TableCell key={idx} align={attr.align}>\r\n                                      {attr.title}\r\n                                    </TableCell>\r\n                                  ))}\r\n                                </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                {Array.isArray(characters) &&\r\n                                  characters.map((character, idx) => (\r\n                                    <TableRow key={idx}>\r\n                                      {characterTableAttributes.map(\r\n                                        (attr, idx) => (\r\n                                          <TableCell\r\n                                            key={idx}\r\n                                            align={attr.align}\r\n                                          >\r\n                                            {character[attr.attributeDBName]}\r\n                                          </TableCell>\r\n                                        )\r\n                                      )}\r\n                                      <TableCell align=\"center\">\r\n                                        <Button\r\n                                          variant=\"outlined\"\r\n                                          color=\"error\"\r\n                                          onClick={() =>\r\n                                            handleRemove(character.name)\r\n                                          }\r\n                                        >\r\n                                          Remove\r\n                                        </Button>\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n                                  ))}\r\n                              </TableBody>\r\n                            </Table>\r\n                          </TableContainer>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    </>\r\n                  )}\r\n                </Fragment>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, InputLabel, MenuItem, FormHelperText, FormControl, Select, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setMakeRaidMode}) {\r\n  const [teamName, setTeamName] = useState(\"\");\r\n  const [numPlayers, setNumPlayers] = useState(\"\");\r\n  const [raidDay_A, setRaidDayA] = useState(\"\");\r\n  const [raidDay_B, setRaidDayB] = useState(\"\");\r\n  const [raidTime, setRaidTime] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [raidCheck, setRaidCheck] = useState(false);\r\n\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Raid Team Called');\r\n    setRaidCheck(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    console.log('Raid Mode called');\r\n    setMakeRaidMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR RAID\r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0) return;\r\n    const api = new API();\r\n    async function checkRaidName() {\r\n        api.checkRaidName(teamName)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkRaidName();\r\n  }, [raidCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (teamName.length === 0 || numPlayers.length === 0 || raidTime.length === 0) return;\r\n    const api = new API();\r\n    async function createRaidTeam() {\r\n        api.createRaidTeam(teamName, numPlayers, raidDay_A, raidDay_B, raidTime)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Raid Team Created!\");\r\n          setMakeRaidMode(false);\r\n        } else {\r\n          alert(\"Creation NOT Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    createRaidTeam();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Create Raid Team\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"teamName\"\r\n                  label=\"Team Name\"\r\n                  name=\"teamName\"\r\n                  value={teamName}\r\n                  onChange={(n) => setTeamName(n.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"numPlayers\"\r\n                  label=\"Raid Team Size\"\r\n                  name=\"numPlayers\"\r\n                  value={numPlayers}\r\n                  onChange={(p) => setNumPlayers(p.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"rd1\">Raid Day 1</InputLabel>\r\n                    <Select\r\n                    id=\"rd1\"\r\n                    value={raidDay_A}\r\n                    label=\"Raid Day 1\"\r\n                    onChange={(a) => setRaidDayA(a.target.value)}\r\n                    >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    <MenuItem value={'Monday'}>Monday</MenuItem>\r\n                    <MenuItem value={'Tuesday'}>Tuesday</MenuItem>\r\n                    <MenuItem value={'Wednesday'}>Wednesday</MenuItem>\r\n                    <MenuItem value={'Thursday'}>Thursday</MenuItem>\r\n                    <MenuItem value={'Friday'}>Friday</MenuItem>\r\n                    <MenuItem value={'Saturday'}>Saturday</MenuItem>\r\n                    <MenuItem value={'Sunday'}>Sunday</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n                <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"raidTime\"\r\n                  label=\"Time of Raid\"\r\n                  name=\"raidTime\"\r\n                  value={raidTime}\r\n                  onChange={(t) => setRaidTime(t.target.value)}\r\n                />\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Raid Team\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleGoBack} >\r\n                  Already have a Raid Team? Go back\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, { Fragment } from 'react';\r\nimport Calendar from '../Calendar/Calendar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add'; // Make sure to import AddIcon\r\nimport Grid from '@mui/material/Grid';\r\nimport { BarChart } from '@mui/x-charts/BarChart';\r\nimport { Divider } from '@mui/material';\r\nimport { PieChart } from '@mui/x-charts/PieChart';\r\n\r\nexport default function OneRaidTeam({ raid }) {\r\n    // Assuming you manage the state of adding a character to the raid\r\n    const [addCharMode, setAddCharMode] = React.useState(false);\r\n\r\n    return (\r\n        <Fragment>\r\n            \r\n            <Grid container spacing={2}>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"div\">\r\n                        Team Name: {raid.teamName} \r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"div\">\r\n                        Raid Days: {raid.raidDay_A} / {raid.raidDay_B} \r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"div\">\r\n                        Raid Time: {raid.raidTime}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                    <Typography component=\"div\">\r\n                        Team Size: {raid.numPlayers}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Divider />\r\n\r\n            <PieChart\r\n                series={[\r\n                    {\r\n                    data: [\r\n                        { id: 0, value: 10, label: 'series A' },\r\n                        { id: 1, value: 15, label: 'series B' },\r\n                        { id: 2, value: 20, label: 'series C' },\r\n                    ],\r\n                    },\r\n                ]}\r\n                width={400}\r\n                height={200}\r\n/>\r\n\r\n\r\n            <BarChart\r\n            series={[\r\n                { data: [35, 44, 24, 34] },\r\n                { data: [51, 6, 49, 30] },\r\n                { data: [15, 25, 30, 50] },\r\n                { data: [60, 50, 15, 25] },\r\n            ]}\r\n            height={290}\r\n            xAxis={[{ data: ['Q1', 'Q2', 'Q3', 'Q4'], scaleType: 'band' }]}\r\n            margin={{ top: 10, bottom: 30, left: 40, right: 10 }}\r\n            />\r\n\r\n\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6} sm={6}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <Button variant=\"outlined\" color=\"success\" onClick={() => setAddCharMode(true)}>\r\n                            Add Character to Raid\r\n                            <IconButton\r\n                                aria-label=\"add character\"\r\n                                size=\"large\"\r\n                                color=\"success\" // Fixed color from 'green' to 'success' to match Button\r\n                                sx={{ fontSize: '2rem', ml: 1 }} // Adjust ml for spacing between Button and IconButton\r\n                            >\r\n                                <AddIcon sx={{ fontSize: 'inherit' }} />\r\n                            </IconButton>\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React, { Fragment, useState } from \"react\";\r\nimport MakeRaidTeam from \"./MakeRaidTeam\";\r\nimport CharsForRaidTeam from \"./CharsForRaidTeam\";\r\nimport AddCharToTeam from \"./AddCharToTeam\";\r\nimport OneRaidTeam from \"./OneRaidTeam\";\r\n\r\nexport default function RaidTeams() {\r\n  const [makeRaidMode, setMakeRaidMode] = useState(false);\r\n  const [addCharMode, setAddCharMode] = useState(false);\r\n  const [raid, setRaid] = useState(undefined);\r\n  const [oneRaidMode, setOneRaidMode] = useState(false);\r\n\r\n  return (\r\n    <Fragment>\r\n      {oneRaidMode ? (\r\n        <OneRaidTeam raid={raid} />\r\n      ) : makeRaidMode ? (\r\n        <MakeRaidTeam setMakeRaidMode={setMakeRaidMode} />\r\n      ) : addCharMode ? (\r\n        <AddCharToTeam setAddCharMode={setAddCharMode} />\r\n      ) : (\r\n        <CharsForRaidTeam\r\n          setOneRaidMode={setOneRaidMode}\r\n          setRaid={setRaid}\r\n          setMakeRaidMode={setMakeRaidMode}\r\n          setAddCharMode={setAddCharMode}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, {Fragment} from 'react';\nimport Typography from '@mui/material/Typography';\n\nexport default function Summary(props) {\n    return (\n        <Fragment>\n            \n            <Typography component=\"div\" variant='h3'>\n                Summary here\n            </Typography>\n        </Fragment>\n    )\n}\n","import Accounts from '../Components/Accounts/Accounts';\nimport Characters from '../Components/Characters/Characters';\nimport RaidTeams from '../Components/RaidTeams/RaidTeams';\nimport Summary from '../Components/SummaryPage/Summary';\n\nconst presentationComponents = (props) => {\n    return [\n        {\n            title: 'Summary',\n            component: <Summary/>\n        },\n        {\n            title: 'Raid Team',\n            component: <RaidTeams/>\n        },\n        {\n            title: 'Account',\n            component: <Accounts/>\n        },\n        {\n            title: 'Add Character',\n            component: <Characters/>\n        },\n    ];\n};\n\n\nexport {presentationComponents};\n","import React, { Fragment, useState } from \"react\";\nimport { styled, useTheme } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Drawer from \"@mui/material/Drawer\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport MuiAppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport List from \"@mui/material/List\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\n\nimport {\n  presentationComponents,\n  containerComponents,\n} from \"./MenuPresentationComponents\";\nimport Button from \"@mui/material/Button\";\n\nconst drawerWidth = 240;\n\nconst Main = styled(\"main\", { shouldForwardProp: (prop) => prop !== \"open\" })(\n  ({ theme, open }) => ({\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: `-${drawerWidth}px`,\n    ...(open && {\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    }),\n  })\n);\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== \"open\",\n})(({ theme, open }) => ({\n  transition: theme.transitions.create([\"margin\", \"width\"], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: `${drawerWidth}px`,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n\nconst DrawerHeader = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n  justifyContent: \"flex-end\",\n}));\n\n// Component used to hold the navigation bar\nconst TopBar = ({ open, selectedItem, handleSelectedItem, logoutAction }) => {\n  // This component is responsible for rendering the Toolbar that is drawn\n  // at the top of the drawer.\n\n  return (\n    <Fragment>\n      <AppBar position=\"fixed\" open={false}>\n        <Toolbar>\n          <List>\n            <PresentationListItems\n              selectedItem={selectedItem}\n              onClick={handleSelectedItem}\n              menuItemTitles={presentationComponents().map(\n                (comp) => comp.title\n              )}\n            />\n          </List>\n          <Box width=\"100%\" justifyContent=\"right\" flex={1}>\n            <Typography\n              variant=\"h7\"\n              noWrap\n              component=\"div\"\n              align=\"right\"\n              onClick={() => logoutAction()}\n            >\n              Logout\n            </Typography>\n          </Box>\n        </Toolbar>\n      </AppBar>\n    </Fragment>\n  );\n};\n\nconst PresentationListItems = (props) => {\n  return (\n    <div style={{ display: \"flex\" }}>\n      {props.menuItemTitles.map((title) => (\n        <ListItem\n          button\n          style={{\n            color: props.selectedItem === title ? \"blue\" : \"inherit\",\n            width: \"fit-content\",\n          }}\n          onClick={() => props.onClick(title)}\n          key={title}\n        >\n          <ListItemText primary={title} key={title} />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nconst findSelectedComponent = (selectedItem) => {\n  const component = [...presentationComponents()].filter(\n    (comp) => comp.title === selectedItem\n  );\n  if (component.length === 1) return component[0];\n\n  console.log(\n    \"In findSelectedComponent of MakeEligible. Didn't find the component that corresponds to the menu item.\"\n  );\n  return {\n    title: null,\n    component: null,\n  };\n};\n\nexport default function MainDraswer({ title, user, logoutAction }) {\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(true);\n  const [selectedItem, setSelectedItem] = useState(\"Summary\");\n\n  console.log(\"in MainDrawer\");\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleSelectedItem = (title) => {\n    setSelectedItem(title);\n  };\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <CssBaseline />\n      <TopBar\n        selectedItem={selectedItem}\n        handleSelectedItem={handleSelectedItem}\n        open={open}\n        logoutAction={logoutAction}\n      />\n      // Allow each link to display components\n      <Main open={open}>\n        <DrawerHeader />\n        {findSelectedComponent(selectedItem).component}\n      </Main>\n    </Box>\n  );\n}\n","import { Fragment } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport MainDrawer from \"./menu/MainDrawer\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#fefefe\",\n    },\n  },\n  // Used for fonts\n  typography: {},\n});\n\nconst makeUserName = ({ email, userName }) => {\n  return `${email} ${userName}`;\n};\n\nexport default function App({ user, logoutAction }) {\n  const mainPageTitle = \"WoW-Teamz\";\n\n  return (\n    <ThemeProvider theme={theme}>\n      <MainDrawer\n        title={mainPageTitle}\n        user={makeUserName(user)}\n        logoutAction={logoutAction}\n      />\n    </ThemeProvider>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"./API_Interface/API_Interface\";\r\nimport {\r\n  Avatar, Box, Button, Checkbox, CssBaseline, Divider, FormControlLabel,\r\n  Grid, Link, Paper, TextField, Typography, createTheme, ThemeProvider\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Container from '@mui/material/Container';\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function SignUp({setSignupMode, setUser}) {\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [exist, setExist] = useState(true);\r\n  const [userCheck, setUserCheck] = useState(false);\r\n\r\n  const handleSubmit = () => {\r\n    console.log('Submit Signup Called');\r\n    setUserCheck(true);\r\n    console.log(email);\r\n  };\r\n\r\n  const handleSignin = () => {\r\n    console.log('Signin called');\r\n    setSignupMode(false);\r\n  };\r\n\r\n\r\n  // CHECK FOR USER\r\n\r\n  useEffect(() => {\r\n    if (email.length === 0) return;\r\n    const api = new API();\r\n    async function checkUserEmail() {\r\n        api.checkUserEmail(email)\r\n        .then( userInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(userInfo.data.user)}`);\r\n        console.log(\"HERE IS USERINFO.DATA\");\r\n        console.log (userInfo.data);\r\n        console.log(\"BELOW IS USER status\");\r\n        console.log(userInfo.data.status);\r\n        if (userInfo.data.status === \"OK\") {  \r\n          console.log(\"USER IS NOT FOUND, PROCEED WITH SIGNUP\");\r\n          setExist(false);\r\n        }\r\n      });\r\n    }\r\n\r\n    checkUserEmail();\r\n  }, [userCheck]);\r\n\r\n  // ADD TO DATABASE \r\n\r\n  useEffect(() => {\r\n    if (email.length === 0 || userName.length === 0 || password.length === 0) return;\r\n    const api = new API();\r\n    async function insertNewUser() {\r\n        api.insertNewUser(userName, email, password)\r\n        .then( newUserInfo => {\r\n        console.log(`API returns user info and it is: ${JSON.stringify(newUserInfo)}`);\r\n        const user = newUserInfo.data.user;\r\n        console.log(\"BELOW IS USER\");\r\n        console.log(user);\r\n        if (newUserInfo.data.status === \"OK\") {\r\n          alert(\"Signup Sucessful, Thank you for signing up!\");\r\n          setUser(user);\r\n          setSignupMode(false);\r\n        } else {\r\n          alert(\"Signup Not Sucessful\");\r\n        }\r\n      });\r\n    }\r\n\r\n    insertNewUser();\r\n  }, [exist]);\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Box component=\"form\" sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"userName\"\r\n                  label=\"User Name\"\r\n                  name=\"userName\"\r\n                  value={userName}\r\n                  onChange={(u) => setUserName(u.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"new-password\"\r\n                  value={password}\r\n                  onChange={(p) => setPassword(p.target.value)}\r\n                />\r\n              </Grid>\r\n              \r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link variant=\"body2\" onClick={handleSignin} >\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        \r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}","import React, { Fragment, useState } from 'react';\nimport Login from './Login';\nimport App from './App';\nimport Signup from './Signup';\n\nexport default function Main() {\n    const [user, setUser] = useState(undefined);\n    const [signupMode, setSignupMode] = useState(false);\n\n    const logout = (setUser) => {\n        return () => {\n            setUser(undefined);\n        }\n    };\n\n    \n\n    return (\n        <Fragment>\n            {\n                user !== undefined ? (\n                    <App user={user} logoutAction={logout(setUser)} />\n                ) : (\n                    signupMode ? (\n                        <Signup user={user} setUser={setUser} setSignupMode={setSignupMode}/>\n                    ) : (\n                        <Login user={user} setUser={setUser} setSignupMode={setSignupMode} />\n                    )\n                )\n            }\n        </Fragment>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}